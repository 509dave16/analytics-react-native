{"version":3,"sources":["AmplitudeSessionPlugin.tsx"],"names":["AmplitudeSessionPlugin","EventPlugin","PluginType","enrichment","Date","now","event","returnEvent","integrations","key","session_id","sessionId","sessionTimer","maxSessionTime","setTimeout","resetTimer","startSession","update","settings","_","active","execute","handleTimer","result","type","EventType","IdentifyEvent","identify","TrackEvent","track","ScreenEvent","screen","AliasEvent","alias","GroupEvent","group","insertSession"],"mappings":"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","sourcesContent":["import {\n  EventPlugin,\n  EventType,\n  IdentifyEventType,\n  PluginType,\n  SegmentAPISettings,\n  SegmentEvent,\n  TrackEventType,\n  ScreenEventType,\n  GroupEventType,\n  UpdateType,\n  AliasEventType,\n} from '@segment/analytics-react-native';\n\nexport class AmplitudeSessionPlugin extends EventPlugin {\n  type = PluginType.enrichment;\n  key = 'Actions Amplitude';\n  active = false;\n  sessionId = Date.now();\n  sessionTimer = false;\n\n  update(settings: SegmentAPISettings, _: UpdateType) {\n    let integrations = settings.integrations;\n    if (this.key in integrations) {\n      this.active = true;\n      this.startSession();\n    }\n  }\n\n  execute(event: SegmentEvent) {\n    if (!this.active) {\n      return event;\n    }\n\n    this.handleTimer();\n\n    let result = event;\n    switch (result.type) {\n      case EventType.IdentifyEvent:\n        result = this.identify(result);\n        break;\n      case EventType.TrackEvent:\n        result = this.track(result);\n        break;\n      case EventType.ScreenEvent:\n        result = this.screen(result);\n        break;\n      case EventType.AliasEvent:\n        result = this.alias(result);\n        break;\n      case EventType.GroupEvent:\n        result = this.group(result);\n        break;\n    }\n    return result;\n  }\n\n  identify(event: IdentifyEventType) {\n    return this.insertSession(event) as IdentifyEventType;\n  }\n\n  track(event: TrackEventType) {\n    return this.insertSession(event) as TrackEventType;\n  }\n\n  screen(event: ScreenEventType) {\n    return this.insertSession(event) as ScreenEventType;\n  }\n\n  group(event: GroupEventType) {\n    return this.insertSession(event) as GroupEventType;\n  }\n\n  alias(event: AliasEventType) {\n    return this.insertSession(event) as AliasEventType;\n  }\n\n  private insertSession = (event: SegmentEvent) => {\n    const returnEvent = event;\n    const integrations = event.integrations;\n    returnEvent.integrations = {\n      ...integrations,\n      [this.key]: {\n        session_id: this.sessionId,\n      },\n    };\n    return returnEvent;\n  };\n\n  private resetTimer = () => {\n    this.sessionTimer = false;\n    this.sessionId = -1;\n  };\n\n  private startSession = () => {\n    const maxSessionTime = 300000;\n\n    setTimeout(() => this.resetTimer(), maxSessionTime);\n    this.sessionId = Date.now();\n    this.sessionTimer = true;\n  };\n\n  private handleTimer = () => {\n    if (!this.sessionTimer) {\n      this.startSession();\n    }\n    return;\n  };\n}\n"]}