{"version":3,"sources":["identify.ts"],"names":["traitMap","firstName","lastName","createdAt","lastSeen","email","name","username","phone","mapTransform","event","mixpanel","settings","userId","mixpanelTraits","traits","undefined","identify","setAllTraitsByDefault","registerSuperProperties","people","getPeople","set","superProperties","length","superPropertyTraits","superProperty","mappedSuperProperties","peopleProperties","peoplePropertyTraits","peopleProperty","mappedPeopleProperties"],"mappings":";;;;;;;AACA;;AAMA,MAAMA,QAAmC,GAAG;AAC1CC,EAAAA,SAAS,EAAE,aAD+B;AAE1CC,EAAAA,QAAQ,EAAE,YAFgC;AAG1CC,EAAAA,SAAS,EAAE,UAH+B;AAI1CC,EAAAA,QAAQ,EAAE,YAJgC;AAK1CC,EAAAA,KAAK,EAAE,QALmC;AAM1CC,EAAAA,IAAI,EAAE,OANoC;AAO1CC,EAAAA,QAAQ,EAAE,WAPgC;AAQ1CC,EAAAA,KAAK,EAAE;AARmC,CAA5C;AAWA,MAAMC,YAAY,GAAG,gDAAqBT,QAArB,EAA+B,EAA/B,CAArB;;eAEe,CACbU,KADa,EAEbC,QAFa,EAGbC,QAHa,KAIV;AACH,QAAMC,MAAM,GAAGH,KAAK,CAACG,MAArB;AACA,QAAMC,cAAc,GAAGL,YAAY,CAACC,KAAK,CAACK,MAAP,CAAnC;;AAEA,MAAIF,MAAM,KAAKG,SAAf,EAA0B;AACxBL,IAAAA,QAAQ,CAACM,QAAT,CAAkBJ,MAAlB;AACD;;AAED,MAAID,QAAQ,CAACM,qBAAT,KAAmC,IAAvC,EAA6C;AAC3CP,IAAAA,QAAQ,CAACQ,uBAAT,CAAiCL,cAAjC;;AAEA,QAAIF,QAAQ,CAACQ,MAAT,KAAoB,IAAxB,EAA8B;AAC5BT,MAAAA,QAAQ,CAACU,SAAT,GAAqBC,GAArB,CAAyBR,cAAzB;AACD;AACF;;AAED,MACEF,QAAQ,CAACW,eAAT,KAA6BP,SAA7B,IACAJ,QAAQ,CAACW,eAAT,CAAyBC,MAF3B,EAGE;AACA,QAAID,eAAe,GAAGX,QAAQ,CAACW,eAA/B;AACA,QAAIE,mBAA2C,GAAG,EAAlD;;AAEA,SAAK,IAAIC,aAAT,IAA0BH,eAA1B,EAA2C;AACzCE,MAAAA,mBAAmB,CAACC,aAAD,CAAnB,GAAqCZ,cAAc,CAACY,aAAD,CAAnD;AACD;;AAED,UAAMC,qBAAqB,GAAGlB,YAAY,CAACgB,mBAAD,CAA1C;AACAd,IAAAA,QAAQ,CAACQ,uBAAT,CAAiCQ,qBAAjC;AACD;;AAED,MACEf,QAAQ,CAACQ,MAAT,KAAoB,IAApB,IACAR,QAAQ,CAACgB,gBAAT,KAA8BZ,SAD9B,IAEAJ,QAAQ,CAACgB,gBAAT,CAA0BJ,MAH5B,EAIE;AACA,QAAII,gBAAgB,GAAGhB,QAAQ,CAACgB,gBAAhC;AACA,QAAIC,oBAA4C,GAAG,EAAnD;;AAEA,SAAK,IAAIC,cAAT,IAA2BF,gBAA3B,EAA6C;AAC3CC,MAAAA,oBAAoB,CAACC,cAAD,CAApB,GAAuCpB,KAAK,CAACK,MAAN,CAAae,cAAb,CAAvC;AACD;;AAED,UAAMC,sBAAsB,GAAGtB,YAAY,CAACoB,oBAAD,CAA3C;AACAlB,IAAAA,QAAQ,CAACU,SAAT,GAAqBC,GAArB,CAAyBS,sBAAzB;AACD;AACF,C","sourcesContent":["import type { Mixpanel } from 'mixpanel-react-native';\nimport {\n  IdentifyEventType,\n  generateMapTransform,\n} from '@segment/analytics-react-native';\nimport type { SegmentMixpanelSettings } from '../types';\n\nconst traitMap: { [key: string]: string } = {\n  firstName: '$first_name',\n  lastName: '$last_name',\n  createdAt: '$created',\n  lastSeen: '$last_seen',\n  email: '$email',\n  name: '$name',\n  username: '$username',\n  phone: '$phone',\n} as any;\n\nconst mapTransform = generateMapTransform(traitMap, {});\n\nexport default (\n  event: IdentifyEventType,\n  mixpanel: Mixpanel,\n  settings: SegmentMixpanelSettings\n) => {\n  const userId = event.userId;\n  const mixpanelTraits = mapTransform(event.traits);\n\n  if (userId !== undefined) {\n    mixpanel.identify(userId);\n  }\n\n  if (settings.setAllTraitsByDefault === true) {\n    mixpanel.registerSuperProperties(mixpanelTraits);\n\n    if (settings.people === true) {\n      mixpanel.getPeople().set(mixpanelTraits);\n    }\n  }\n\n  if (\n    settings.superProperties !== undefined &&\n    settings.superProperties.length\n  ) {\n    let superProperties = settings.superProperties;\n    let superPropertyTraits: { [key: string]: any } = {};\n\n    for (let superProperty of superProperties) {\n      superPropertyTraits[superProperty] = mixpanelTraits[superProperty];\n    }\n\n    const mappedSuperProperties = mapTransform(superPropertyTraits);\n    mixpanel.registerSuperProperties(mappedSuperProperties);\n  }\n\n  if (\n    settings.people === true &&\n    settings.peopleProperties !== undefined &&\n    settings.peopleProperties.length\n  ) {\n    let peopleProperties = settings.peopleProperties;\n    let peoplePropertyTraits: { [key: string]: any } = {};\n\n    for (let peopleProperty of peopleProperties) {\n      peoplePropertyTraits[peopleProperty] = event.traits[peopleProperty];\n    }\n\n    const mappedPeopleProperties = mapTransform(peoplePropertyTraits);\n    mixpanel.getPeople().set(mappedPeopleProperties);\n  }\n};\n"]}