{"version":3,"sources":["track.ts"],"names":["eventName","properties","settings","mixpanel","track","people","propIncrements","undefined","length","propString","property","toLowerCase","incrementValue","getPeople","increment","eventIncrements","eventString","lastEvent","lastDate","Date","set","revenue","trackCharge"],"mappings":";;;;;;;AACA;eAIe,CACbA,SADa,EAEbC,UAFa,EAGbC,QAHa,EAIbC,QAJa,KAKV;AAAA;;AACH;AACAA,EAAAA,QAAQ,CAACC,KAAT,CAAeJ,SAAf,EAA0BC,UAA1B,EAFG,CAIH;;AACA,MAAIC,QAAQ,CAACG,MAAT,KAAoB,IAAxB,EAA8B;AAC5B;AACD;;AAED,MACEH,QAAQ,CAACI,cAAT,KAA4BC,SAA5B,IACA,0BAAAL,QAAQ,CAACI,cAAT,gFAAyBE,MAAzB,IAAkC,CAFpC,EAGE;AACA,QAAIF,cAAc,GAAGJ,QAAQ,CAACI,cAA9B;;AAEA,SAAK,IAAIG,UAAT,IAAuBH,cAAvB,EAAuC;AACrC,WAAK,IAAII,QAAT,IAAqBT,UAArB,EAAiC;AAC/B,YAAIQ,UAAU,CAACE,WAAX,OAA6BD,QAAQ,CAACC,WAAT,EAAjC,EAAyD;AACvD,cAAIC,cAAc,GAAGX,UAAU,CAACS,QAAD,CAA/B;;AACA,cAAI,OAAOE,cAAP,KAA0B,QAA9B,EAAwC;AACtCT,YAAAA,QAAQ,CAACU,SAAT,GAAqBC,SAArB,CAA+BJ,QAA/B,EAAyCE,cAAzC;AACD;AACF;AACF;AACF;AACF;;AAED,MACEV,QAAQ,CAACa,eAAT,KAA6BR,SAA7B,IACAL,QAAQ,CAACa,eAAT,CAAyBP,MAAzB,GAAkC,CAFpC,EAGE;AACA,UAAMO,eAAe,GAAGb,QAAQ,CAACa,eAAjC;;AAEA,SAAK,IAAIC,WAAT,IAAwBD,eAAxB,EAAyC;AACvC,UAAIC,WAAW,CAACL,WAAZ,OAA8BX,SAAS,CAACW,WAAV,EAAlC,EAA2D;AACzD,cAAMD,QAAQ,GAAGV,SAAjB;AACAG,QAAAA,QAAQ,CAACU,SAAT,GAAqBC,SAArB,CAA+BJ,QAA/B,EAAyC,CAAzC;AAEA,cAAMO,SAAS,GAAI,QAAOP,QAAS,EAAnC;AACA,cAAMQ,QAAQ,GAAGC,IAAI,EAArB;AACAhB,QAAAA,QAAQ,CAACU,SAAT,GAAqBO,GAArB,CAAyBH,SAAzB,EAAoCC,QAApC;AACD;AACF;AACF;;AAED,MAAIjB,UAAU,CAACoB,OAAX,KAAuBd,SAA3B,EAAsC;AACpC,QAAIc,OAAO,GAAGpB,UAAU,CAACoB,OAAzB;AAEAlB,IAAAA,QAAQ,CAACU,SAAT,GAAqBS,WAArB,CAAiCD,OAAjC,EAA0CpB,UAA1C;AACD;AACF,C","sourcesContent":["import type { Mixpanel } from 'mixpanel-react-native';\n//@ts-ignore\nimport type { JsonMap } from '@segment/analytics-react-native';\nimport type { SegmentMixpanelSettings } from '../types';\n\nexport default (\n  eventName: string,\n  properties: JsonMap,\n  settings: SegmentMixpanelSettings,\n  mixpanel: Mixpanel\n) => {\n  //track raw event\n  mixpanel.track(eventName, properties);\n\n  //everything else is for people setting\n  if (settings.people !== true) {\n    return;\n  }\n\n  if (\n    settings.propIncrements !== undefined &&\n    settings.propIncrements?.length > 0\n  ) {\n    let propIncrements = settings.propIncrements;\n\n    for (let propString of propIncrements) {\n      for (let property in properties) {\n        if (propString.toLowerCase() === property.toLowerCase()) {\n          let incrementValue = properties[property];\n          if (typeof incrementValue === 'number') {\n            mixpanel.getPeople().increment(property, incrementValue);\n          }\n        }\n      }\n    }\n  }\n\n  if (\n    settings.eventIncrements !== undefined &&\n    settings.eventIncrements.length > 0\n  ) {\n    const eventIncrements = settings.eventIncrements;\n\n    for (let eventString of eventIncrements) {\n      if (eventString.toLowerCase() === eventName.toLowerCase()) {\n        const property = eventName;\n        mixpanel.getPeople().increment(property, 1);\n\n        const lastEvent = `Last ${property}`;\n        const lastDate = Date();\n        mixpanel.getPeople().set(lastEvent, lastDate);\n      }\n    }\n  }\n\n  if (properties.revenue !== undefined) {\n    let revenue = properties.revenue as number;\n\n    mixpanel.getPeople().trackCharge(revenue, properties);\n  }\n};\n"]}