{"version":3,"sources":["MixpanelPlugin.ts"],"names":["EU_SERVER","MixpanelPlugin","DestinationPlugin","PluginType","destination","mixpanel","undefined","settings","update","_","mixpanelSettings","integrations","key","token","length","Mixpanel","init","enableEuropeanEndpoint","setServerURL","identify","event","isInitialized","track","eventName","properties","screen","group","alias","analytics","flush","reset"],"mappings":";;;;;;;AAAA;;AAaA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,MAAMA,SAAS,GAAG,qBAAlB;;;AACA,MAAMC,cAAN,SAA6BC,uCAA7B,CAA+C;AAAA;AAAA;;AAAA,kCAC7CC,iCAAWC,WADkC;;AAAA,iCAE9C,UAF8C;;AAAA,0CAGrC,KAHqC;;AAAA;;AAAA;;AAAA,2CAM5B,MACtB,KAAKC,QAAL,KAAkBC,SAAlB,IAA+B,KAAKC,QAAL,KAAkBD,SAPC;AAAA;;AASpDE,EAAAA,MAAM,CAACD,QAAD,EAA+BE,CAA/B,EAA8C;AAClD,UAAMC,gBAAgB,GAAGH,QAAQ,CAACI,YAAT,CACvB,KAAKC,GADkB,CAAzB;;AAIA,QAAIF,gBAAgB,KAAKJ,SAArB,IAAkC,KAAKD,QAAL,KAAkBC,SAAxD,EAAmE;AACjE;AACD;;AACD,QAAII,gBAAgB,CAACG,KAAjB,CAAuBC,MAAvB,KAAkC,CAAtC,EAAyC;AACvC;AACD;;AACD,SAAKT,QAAL,GAAgB,IAAIU,6BAAJ,CAAaL,gBAAgB,CAACG,KAA9B,CAAhB;AACA,SAAKR,QAAL,CAAcW,IAAd;AACA,SAAKT,QAAL,GAAgBG,gBAAhB;;AAEA,QAAIA,gBAAgB,CAACO,sBAArB,EAA6C;AAAA;;AAC3C,6BAAKZ,QAAL,kEAAea,YAAf,CAA4BlB,SAA5B;AACD;AACF;;AAEDmB,EAAAA,QAAQ,CAACC,KAAD,EAA2B;AACjC,QAAI,KAAKC,aAAL,EAAJ,EAA0B;AACxB,6BAASD,KAAT,EAAgB,KAAKf,QAArB,EAAgC,KAAKE,QAArC;AACD;;AACD,WAAOa,KAAP;AACD;;AAEDE,EAAAA,KAAK,CAACF,KAAD,EAAwB;AAC3B,UAAMG,SAAS,GAAGH,KAAK,CAACA,KAAxB;AACA,UAAMI,UAAU,GAAGJ,KAAK,CAACI,UAAzB;;AAEA,QAAI,KAAKH,aAAL,EAAJ,EAA0B;AACxB,0BAAME,SAAN,EAAiBC,UAAjB,EAA6B,KAAKjB,QAAlC,EAA6C,KAAKF,QAAlD;AACD;;AACD,WAAOe,KAAP;AACD;;AAEDK,EAAAA,MAAM,CAACL,KAAD,EAAyB;AAC7B,QAAI,KAAKC,aAAL,EAAJ,EAA0B;AACxB,2BAAOD,KAAP,EAAc,KAAKf,QAAnB,EAA8B,KAAKE,QAAnC;AACD;;AACD,WAAOa,KAAP;AACD;;AAEDM,EAAAA,KAAK,CAACN,KAAD,EAAwB;AAC3B,QAAI,KAAKC,aAAL,EAAJ,EAA0B;AACxB,0BAAMD,KAAN,EAAa,KAAKf,QAAlB,EAA6B,KAAKE,QAAlC;AACD;;AACD,WAAOa,KAAP;AACD;;AAEDO,EAAAA,KAAK,CAACP,KAAD,EAAwB;AAC3B,QAAI,KAAKf,QAAL,KAAkBC,SAAtB,EAAiC;AAC/B,0BAAMc,KAAN,EAAa,KAAKf,QAAlB,EAA4B,KAAKuB,SAAjC;AACD;;AACD,WAAOR,KAAP;AACD;;AAEDS,EAAAA,KAAK,GAAS;AAAA;;AACZ,4BAAKxB,QAAL,oEAAewB,KAAf;AACD;;AAEDC,EAAAA,KAAK,GAAS;AAAA;;AACZ,4BAAKzB,QAAL,oEAAeyB,KAAf;AACD;;AAzEmD","sourcesContent":["import {\n  DestinationPlugin,\n  PluginType,\n  TrackEventType,\n  ScreenEventType,\n  SegmentAPISettings,\n  UpdateType,\n  IdentifyEventType,\n  GroupEventType,\n  JsonMap,\n  AliasEventType,\n} from '@segment/analytics-react-native';\nimport type { SegmentMixpanelSettings } from './types';\nimport { Mixpanel } from 'mixpanel-react-native';\nimport identify from './methods/identify';\nimport screen from './methods/screen';\nimport group from './methods/group';\nimport alias from './methods/alias';\nimport track from './methods/track';\n\nexport const EU_SERVER = 'api.eu.mixpanel.com';\nexport class MixpanelPlugin extends DestinationPlugin {\n  type = PluginType.destination;\n  key = 'Mixpanel';\n  trackScreens = false;\n  private mixpanel: Mixpanel | undefined;\n  private settings: SegmentMixpanelSettings | undefined;\n  private isInitialized = () =>\n    this.mixpanel !== undefined && this.settings !== undefined;\n\n  update(settings: SegmentAPISettings, _: UpdateType) {\n    const mixpanelSettings = settings.integrations[\n      this.key\n    ] as SegmentMixpanelSettings;\n\n    if (mixpanelSettings === undefined || this.mixpanel !== undefined) {\n      return;\n    }\n    if (mixpanelSettings.token.length === 0) {\n      return;\n    }\n    this.mixpanel = new Mixpanel(mixpanelSettings.token);\n    this.mixpanel.init();\n    this.settings = mixpanelSettings;\n\n    if (mixpanelSettings.enableEuropeanEndpoint) {\n      this.mixpanel?.setServerURL(EU_SERVER);\n    }\n  }\n\n  identify(event: IdentifyEventType) {\n    if (this.isInitialized()) {\n      identify(event, this.mixpanel!, this.settings!);\n    }\n    return event;\n  }\n\n  track(event: TrackEventType) {\n    const eventName = event.event;\n    const properties = event.properties as JsonMap;\n\n    if (this.isInitialized()) {\n      track(eventName, properties, this.settings!, this.mixpanel!);\n    }\n    return event;\n  }\n\n  screen(event: ScreenEventType) {\n    if (this.isInitialized()) {\n      screen(event, this.mixpanel!, this.settings!);\n    }\n    return event;\n  }\n\n  group(event: GroupEventType) {\n    if (this.isInitialized()) {\n      group(event, this.mixpanel!, this.settings!);\n    }\n    return event;\n  }\n\n  alias(event: AliasEventType) {\n    if (this.mixpanel !== undefined) {\n      alias(event, this.mixpanel, this.analytics!);\n    }\n    return event;\n  }\n\n  flush(): void {\n    this.mixpanel?.flush();\n  }\n\n  reset(): void {\n    this.mixpanel?.reset();\n  }\n}\n"]}