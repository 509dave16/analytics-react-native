{"version":3,"sources":["MixpanelPlugin.ts"],"names":["DestinationPlugin","PluginType","Mixpanel","identify","screen","group","alias","track","EU_SERVER","MixpanelPlugin","destination","mixpanel","undefined","settings","update","_","mixpanelSettings","integrations","key","token","length","init","enableEuropeanEndpoint","setServerURL","event","isInitialized","eventName","properties","analytics","flush","reset"],"mappings":"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","sourcesContent":["import {\n  DestinationPlugin,\n  PluginType,\n  TrackEventType,\n  ScreenEventType,\n  SegmentAPISettings,\n  UpdateType,\n  IdentifyEventType,\n  GroupEventType,\n  JsonMap,\n  AliasEventType,\n} from '@segment/analytics-react-native';\nimport type { SegmentMixpanelSettings } from './types';\nimport { Mixpanel } from 'mixpanel-react-native';\nimport identify from './methods/identify';\nimport screen from './methods/screen';\nimport group from './methods/group';\nimport alias from './methods/alias';\nimport track from './methods/track';\n\nexport const EU_SERVER = 'api.eu.mixpanel.com';\nexport class MixpanelPlugin extends DestinationPlugin {\n  type = PluginType.destination;\n  key = 'Mixpanel';\n  trackScreens = false;\n  private mixpanel: Mixpanel | undefined;\n  private settings: SegmentMixpanelSettings | undefined;\n  private isInitialized = () =>\n    this.mixpanel !== undefined && this.settings !== undefined;\n\n  update(settings: SegmentAPISettings, _: UpdateType) {\n    const mixpanelSettings = settings.integrations[\n      this.key\n    ] as SegmentMixpanelSettings;\n\n    if (mixpanelSettings === undefined || this.mixpanel !== undefined) {\n      return;\n    }\n    if (mixpanelSettings.token.length === 0) {\n      return;\n    }\n    this.mixpanel = new Mixpanel(mixpanelSettings.token);\n    this.mixpanel.init();\n    this.settings = mixpanelSettings;\n\n    if (mixpanelSettings.enableEuropeanEndpoint) {\n      this.mixpanel?.setServerURL(EU_SERVER);\n    }\n  }\n\n  identify(event: IdentifyEventType) {\n    if (this.isInitialized()) {\n      identify(event, this.mixpanel!, this.settings!);\n    }\n    return event;\n  }\n\n  track(event: TrackEventType) {\n    const eventName = event.event;\n    const properties = event.properties as JsonMap;\n\n    if (this.isInitialized()) {\n      track(eventName, properties, this.settings!, this.mixpanel!);\n    }\n    return event;\n  }\n\n  screen(event: ScreenEventType) {\n    if (this.isInitialized()) {\n      screen(event, this.mixpanel!, this.settings!);\n    }\n    return event;\n  }\n\n  group(event: GroupEventType) {\n    if (this.isInitialized()) {\n      group(event, this.mixpanel!, this.settings!);\n    }\n    return event;\n  }\n\n  alias(event: AliasEventType) {\n    if (this.mixpanel !== undefined) {\n      alias(event, this.mixpanel, this.analytics!);\n    }\n    return event;\n  }\n\n  flush(): void {\n    this.mixpanel?.flush();\n  }\n\n  reset(): void {\n    this.mixpanel?.reset();\n  }\n}\n"]}