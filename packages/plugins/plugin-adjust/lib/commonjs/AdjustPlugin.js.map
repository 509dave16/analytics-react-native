{"version":3,"sources":["AdjustPlugin.tsx"],"names":["AdjustPlugin","DestinationPlugin","PluginType","destination","update","settings","_","adjustSettings","integrations","key","environment","setEnvironmentProduction","adjustConfig","AdjustConfig","appToken","hasRegisteredCallback","setAttributionCallbackListener","attribution","trackPayload","provider","trackerToken","trackerName","campaign","source","network","name","content","clickLabel","adCreative","creative","adGroup","adgroup","analytics","track","bufferingEnabled","setEventBufferingEnabled","useDelay","setDelay","delayTime","setDelayStart","Adjust","create","identify","event","reset"],"mappings":";;;;;;;AAAA;;AASA;;AACA;;AACA;;AACA;;;;;;AAEO,MAAMA,YAAN,SAA2BC,uCAA3B,CAA6C;AAAA;AAAA;;AAAA,kCAC3CC,iCAAWC,WADgC;;AAAA,iCAE5C,QAF4C;;AAAA,sCAID,IAJC;;AAAA,mDAKT,KALS;AAAA;;AAOlDC,EAAAA,MAAM,CAACC,QAAD,EAA+BC,CAA/B,EAA8C;AAClD,UAAMC,cAAc,GAAGF,QAAQ,CAACG,YAAT,CACrB,KAAKC,GADgB,CAAvB;;AAIA,QAAI,CAACF,cAAL,EAAqB;AACnB;AACD;;AAED,SAAKF,QAAL,GAAgBE,cAAhB;AAEA,UAAMG,WAAW,GAAG,KAAKL,QAAL,CAAcM,wBAAd,GAChB,YADgB,GAEhB,SAFJ;AAIA,UAAMC,YAAY,GAAG,IAAIC,+BAAJ,CAAiB,KAAKR,QAAL,CAAcS,QAA/B,EAAyCJ,WAAzC,CAArB;;AAEA,QAAI,KAAKK,qBAAL,KAA+B,KAAnC,EAA0C;AACxCH,MAAAA,YAAY,CAACI,8BAAb,CAA6CC,WAAD,IAAiB;AAAA;;AAC3D,YAAIC,YAAY,GAAG;AACjBC,UAAAA,QAAQ,EAAE,QADO;AAEjBC,UAAAA,YAAY,EAAEH,WAAW,CAACG,YAFT;AAGjBC,UAAAA,WAAW,EAAEJ,WAAW,CAACI,WAHR;AAIjBC,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAEN,WAAW,CAACO,OADZ;AAERC,YAAAA,IAAI,EAAER,WAAW,CAACK,QAFV;AAGRI,YAAAA,OAAO,EAAET,WAAW,CAACU,UAHb;AAIRC,YAAAA,UAAU,EAAEX,WAAW,CAACY,QAJhB;AAKRC,YAAAA,OAAO,EAAEb,WAAW,CAACc;AALb;AAJO,SAAnB;AAYA,gCAAKC,SAAL,oEAAgBC,KAAhB,CAAsB,oBAAtB,EAA4Cf,YAA5C;AACD,OAdD;AAeA,WAAKH,qBAAL,GAA6B,IAA7B;AACD;;AAED,UAAMmB,gBAAgB,GAAG,KAAK7B,QAAL,CAAc8B,wBAAvC;;AACA,QAAID,gBAAJ,EAAsB;AACpBtB,MAAAA,YAAY,CAACuB,wBAAb,CAAsCD,gBAAtC;AACD;;AAED,UAAME,QAAQ,GAAG,KAAK/B,QAAL,CAAcgC,QAA/B;;AACA,QAAID,QAAJ,EAAc;AACZ,YAAME,SAAS,GAAG,KAAKjC,QAAL,CAAciC,SAAhC;;AACA,UAAIA,SAAJ,EAAe;AACb1B,QAAAA,YAAY,CAAC2B,aAAb,CAA2BD,SAA3B;AACD;AACF;;AAEDE,8BAAOC,MAAP,CAAc7B,YAAd;AACD;;AACD8B,EAAAA,QAAQ,CAACC,KAAD,EAA2B;AACjC,2BAASA,KAAT;AACA,WAAOA,KAAP;AACD;;AAEDV,EAAAA,KAAK,CAACU,KAAD,EAAwB;AAC3B,wBAAMA,KAAN,EAAa,KAAKtC,QAAlB;AACA,WAAOsC,KAAP;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN;AACD;;AAtEiD","sourcesContent":["import {\n  DestinationPlugin,\n  IdentifyEventType,\n  PluginType,\n  TrackEventType,\n  SegmentAdjustSettings,\n  SegmentAPISettings,\n  UpdateType,\n} from '@segment/analytics-react-native';\nimport { Adjust, AdjustConfig } from 'react-native-adjust';\nimport identify from './methods/identify';\nimport track from './methods/track';\nimport reset from './methods/reset';\n\nexport class AdjustPlugin extends DestinationPlugin {\n  type = PluginType.destination;\n  key = 'Adjust';\n\n  private settings: SegmentAdjustSettings | null = null;\n  private hasRegisteredCallback: boolean = false;\n\n  update(settings: SegmentAPISettings, _: UpdateType) {\n    const adjustSettings = settings.integrations[\n      this.key\n    ] as SegmentAdjustSettings;\n\n    if (!adjustSettings) {\n      return;\n    }\n\n    this.settings = adjustSettings;\n\n    const environment = this.settings.setEnvironmentProduction\n      ? 'production'\n      : 'sandbox';\n\n    const adjustConfig = new AdjustConfig(this.settings.appToken, environment);\n\n    if (this.hasRegisteredCallback === false) {\n      adjustConfig.setAttributionCallbackListener((attribution) => {\n        let trackPayload = {\n          provider: 'Adjust',\n          trackerToken: attribution.trackerToken,\n          trackerName: attribution.trackerName,\n          campaign: {\n            source: attribution.network,\n            name: attribution.campaign,\n            content: attribution.clickLabel,\n            adCreative: attribution.creative,\n            adGroup: attribution.adgroup,\n          },\n        };\n        this.analytics?.track('Install Attributed', trackPayload);\n      });\n      this.hasRegisteredCallback = true;\n    }\n\n    const bufferingEnabled = this.settings.setEventBufferingEnabled;\n    if (bufferingEnabled) {\n      adjustConfig.setEventBufferingEnabled(bufferingEnabled);\n    }\n\n    const useDelay = this.settings.setDelay;\n    if (useDelay) {\n      const delayTime = this.settings.delayTime;\n      if (delayTime) {\n        adjustConfig.setDelayStart(delayTime);\n      }\n    }\n\n    Adjust.create(adjustConfig);\n  }\n  identify(event: IdentifyEventType) {\n    identify(event);\n    return event;\n  }\n\n  track(event: TrackEventType) {\n    track(event, this.settings!);\n    return event;\n  }\n\n  reset() {\n    reset();\n  }\n}\n"]}