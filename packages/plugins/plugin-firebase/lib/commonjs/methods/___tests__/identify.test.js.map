{"version":3,"sources":["identify.test.ts"],"names":["mockSetUserId","jest","fn","mockSetUserProperties","mock","setUserId","setUserProperties","describe","beforeEach","clearAllMocks","it","event","type","userId","anonymousId","messageId","timestamp","expect","toHaveBeenCalledTimes","not","toHaveBeenCalled","toHaveBeenCalledWith","traits","name"],"mappings":";;AACA;;;;AAEA,MAAMA,aAAa,GAAGC,IAAI,CAACC,EAAL,EAAtB;AACA,MAAMC,qBAAqB,GAAGF,IAAI,CAACC,EAAL,EAA9B;AAEAD,IAAI,CAACG,IAAL,CAAU,kCAAV,EAA8C,MAAM,OAAO;AACzDC,EAAAA,SAAS,EAAEL,aAD8C;AAEzDM,EAAAA,iBAAiB,EAAEH;AAFsC,CAAP,CAApD;AAKAI,QAAQ,CAAC,WAAD,EAAc,MAAM;AAC1BC,EAAAA,UAAU,CAAC,MAAM;AACfP,IAAAA,IAAI,CAACQ,aAAL;AACD,GAFS,CAAV;AAIAC,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAY;AACzD,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAE,UADM;AAEZC,MAAAA,MAAM,EAAE,KAFI;AAGZC,MAAAA,WAAW,EAAE,MAHD;AAIZC,MAAAA,SAAS,EAAE,YAJC;AAKZC,MAAAA,SAAS,EAAE;AALC,KAAd;AAQA,UAAM,uBAASL,KAAT,CAAN;AAEAM,IAAAA,MAAM,CAACjB,aAAD,CAAN,CAAsBkB,qBAAtB,CAA4C,CAA5C;AACAD,IAAAA,MAAM,CAACd,qBAAD,CAAN,CAA8BgB,GAA9B,CAAkCC,gBAAlC;AACAH,IAAAA,MAAM,CAACjB,aAAD,CAAN,CAAsBqB,oBAAtB,CAA2C,KAA3C;AACD,GAdC,CAAF;AAgBAX,EAAAA,EAAE,CAAC,oDAAD,EAAuD,YAAY;AACnE,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAE,UADM;AAEZC,MAAAA,MAAM,EAAE,KAFI;AAGZC,MAAAA,WAAW,EAAE,MAHD;AAIZC,MAAAA,SAAS,EAAE,YAJC;AAKZC,MAAAA,SAAS,EAAE,OALC;AAMZM,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE;AADA;AANI,KAAd;AAWA,UAAM,uBAASZ,KAAT,CAAN;AAEAM,IAAAA,MAAM,CAACjB,aAAD,CAAN,CAAsBkB,qBAAtB,CAA4C,CAA5C;AACAD,IAAAA,MAAM,CAACd,qBAAD,CAAN,CAA8Be,qBAA9B,CAAoD,CAApD;AACAD,IAAAA,MAAM,CAACjB,aAAD,CAAN,CAAsBqB,oBAAtB,CAA2C,KAA3C;AACAJ,IAAAA,MAAM,CAACd,qBAAD,CAAN,CAA8BkB,oBAA9B,CAAmD;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAnD;AACD,GAlBC,CAAF;AAmBD,CAxCO,CAAR","sourcesContent":["import type { IdentifyEventType } from '@segment/analytics-react-native/src';\nimport identify from '../identify';\n\nconst mockSetUserId = jest.fn();\nconst mockSetUserProperties = jest.fn();\n\njest.mock('@react-native-firebase/analytics', () => () => ({\n  setUserId: mockSetUserId,\n  setUserProperties: mockSetUserProperties,\n}));\n\ndescribe('#identify', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('forwards the identify event with ID only', async () => {\n    const event = {\n      type: 'identify',\n      userId: '123',\n      anonymousId: 'anon',\n      messageId: 'message-id',\n      timestamp: '00000',\n    } as IdentifyEventType;\n\n    await identify(event);\n\n    expect(mockSetUserId).toHaveBeenCalledTimes(1);\n    expect(mockSetUserProperties).not.toHaveBeenCalled();\n    expect(mockSetUserId).toHaveBeenCalledWith('123');\n  });\n\n  it('forwards the identify event with ID and properties', async () => {\n    const event = {\n      type: 'identify',\n      userId: '123',\n      anonymousId: 'anon',\n      messageId: 'message-id',\n      timestamp: '00000',\n      traits: {\n        name: 'Mary',\n      },\n    } as IdentifyEventType;\n\n    await identify(event);\n\n    expect(mockSetUserId).toHaveBeenCalledTimes(1);\n    expect(mockSetUserProperties).toHaveBeenCalledTimes(1);\n    expect(mockSetUserId).toHaveBeenCalledWith('123');\n    expect(mockSetUserProperties).toHaveBeenCalledWith({ name: 'Mary' });\n  });\n});\n"]}