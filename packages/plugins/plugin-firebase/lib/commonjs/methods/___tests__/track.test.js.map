{"version":3,"sources":["track.test.ts"],"names":["mockLogEvent","jest","fn","mock","logEvent","describe","beforeEach","clearAllMocks","it","event","type","EventType","TrackEvent","anonymousId","messageId","timestamp","properties","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","foo"],"mappings":";;AAAA;;AACA;;;;AAEA,MAAMA,YAAY,GAAGC,IAAI,CAACC,EAAL,EAArB;AAEAD,IAAI,CAACE,IAAL,CAAU,kCAAV,EAA8C,MAAM,OAAO;AACzDC,EAAAA,QAAQ,EAAEJ;AAD+C,CAAP,CAApD;AAIAK,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBC,EAAAA,UAAU,CAAC,MAAM;AACfL,IAAAA,IAAI,CAACM,aAAL;AACD,GAFS,CAAV;AAIAC,EAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACtD,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAEC,gCAAUC,UADJ;AAEZH,MAAAA,KAAK,EAAE,YAFK;AAGZI,MAAAA,WAAW,EAAE,MAHD;AAIZC,MAAAA,SAAS,EAAE,YAJC;AAKZC,MAAAA,SAAS,EAAE,OALC;AAMZC,MAAAA,UAAU,EAAE;AANA,KAAd;AASA,UAAM,oBAAMP,KAAN,CAAN;AAEAQ,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBkB,qBAArB,CAA2C,CAA3C;AACAD,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBmB,oBAArB,CAA0C,YAA1C,EAAwD,EAAxD;AACD,GAdC,CAAF;AAgBAX,EAAAA,EAAE,CAAC,iDAAD,EAAoD,YAAY;AAChE,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAEC,gCAAUC,UADJ;AAEZH,MAAAA,KAAK,EAAE,oBAFK;AAGZI,MAAAA,WAAW,EAAE,MAHD;AAIZC,MAAAA,SAAS,EAAE,YAJC;AAKZC,MAAAA,SAAS,EAAE,OALC;AAMZC,MAAAA,UAAU,EAAE;AAAEI,QAAAA,GAAG,EAAE;AAAP;AANA,KAAd;AASA,UAAM,oBAAMX,KAAN,CAAN;AAEAQ,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBkB,qBAArB,CAA2C,CAA3C;AACAD,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBmB,oBAArB,CAA0C,oBAA1C,EAAgE;AAC9DC,MAAAA,GAAG,EAAE;AADyD,KAAhE;AAGD,GAhBC,CAAF;AAkBAZ,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAY;AACzD,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAEC,gCAAUC,UADJ;AAEZH,MAAAA,KAAK,EAAE,iCAFK;AAGZI,MAAAA,WAAW,EAAE,MAHD;AAIZC,MAAAA,SAAS,EAAE,YAJC;AAKZC,MAAAA,SAAS,EAAE,OALC;AAMZC,MAAAA,UAAU,EAAE;AANA,KAAd;AASA,UAAM,oBAAMP,KAAN,CAAN;AAEAQ,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBkB,qBAArB,CAA2C,CAA3C;AACAD,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBmB,oBAArB,CACE,iCADF,EAEE,EAFF;AAID,GAjBC,CAAF;AAmBAX,EAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAY;AAC1E,UAAMC,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAEC,gCAAUC,UADJ;AAEZH,MAAAA,KAAK,EAAE,gBAFK;AAGZI,MAAAA,WAAW,EAAE,MAHD;AAIZC,MAAAA,SAAS,EAAE,YAJC;AAKZC,MAAAA,SAAS,EAAE,OALC;AAMZC,MAAAA,UAAU,EAAE;AANA,KAAd;AASA,UAAM,oBAAMP,KAAN,CAAN;AAEAQ,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBkB,qBAArB,CAA2C,CAA3C;AACAD,IAAAA,MAAM,CAACjB,YAAD,CAAN,CAAqBmB,oBAArB,CAA0C,iBAA1C,EAA6D,EAA7D;AACD,GAdC,CAAF;AAeD,CAzEO,CAAR","sourcesContent":["import { EventType, TrackEventType } from '@segment/analytics-react-native';\nimport track from '../track';\n\nconst mockLogEvent = jest.fn();\n\njest.mock('@react-native-firebase/analytics', () => () => ({\n  logEvent: mockLogEvent,\n}));\n\ndescribe('#track', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('forwards a track event with name only', async () => {\n    const event = {\n      type: EventType.TrackEvent,\n      event: 'test_event',\n      anonymousId: 'anon',\n      messageId: 'message-id',\n      timestamp: '00000',\n      properties: {},\n    } as TrackEventType;\n\n    await track(event);\n\n    expect(mockLogEvent).toHaveBeenCalledTimes(1);\n    expect(mockLogEvent).toHaveBeenCalledWith('test_event', {});\n  });\n\n  it('forwards a track event with name and properties', async () => {\n    const event = {\n      type: EventType.TrackEvent,\n      event: 'another_test_event',\n      anonymousId: 'anon',\n      messageId: 'message-id',\n      timestamp: '00000',\n      properties: { foo: 'bar' },\n    } as TrackEventType;\n\n    await track(event);\n\n    expect(mockLogEvent).toHaveBeenCalledTimes(1);\n    expect(mockLogEvent).toHaveBeenCalledWith('another_test_event', {\n      foo: 'bar',\n    });\n  });\n\n  it('removes non-alphanumeric characters from', async () => {\n    const event = {\n      type: EventType.TrackEvent,\n      event: 'yet another!!test$%^&event-CAPS',\n      anonymousId: 'anon',\n      messageId: 'message-id',\n      timestamp: '00000',\n      properties: {},\n    } as TrackEventType;\n\n    await track(event);\n\n    expect(mockLogEvent).toHaveBeenCalledTimes(1);\n    expect(mockLogEvent).toHaveBeenCalledWith(\n      'yet_another__test____event_CAPS',\n      {}\n    );\n  });\n\n  it('converts the event name to firebase event when applicable', async () => {\n    const event = {\n      type: EventType.TrackEvent,\n      event: 'Order Refunded',\n      anonymousId: 'anon',\n      messageId: 'message-id',\n      timestamp: '00000',\n      properties: {},\n    } as TrackEventType;\n\n    await track(event);\n\n    expect(mockLogEvent).toHaveBeenCalledTimes(1);\n    expect(mockLogEvent).toHaveBeenCalledWith('purchase_refund', {});\n  });\n});\n"]}