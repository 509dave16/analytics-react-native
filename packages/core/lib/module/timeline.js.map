{"version":3,"sources":["timeline.ts"],"names":["PluginType","UpdateType","getAllPlugins","Timeline","add","plugin","type","plugins","push","settings","analytics","get","hasInitialSettings","undefined","update","integrations","initial","onChange","newSettings","refresh","remove","index","findIndex","f","splice","apply","closure","forEach","process","incomingEvent","beforeResult","applyPlugins","before","event","enrichmentResult","enrichment","destination","afterResult","after","result","execute"],"mappings":"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","sourcesContent":["import { PluginType, SegmentEvent, UpdateType } from './types';\nimport type { Plugin } from './plugin';\nimport { getAllPlugins } from './util';\n\n/*\ntype TimelinePlugins = {\n    before?: Plugin[] | undefined;\n    enrichment?: Plugin[] | undefined;\n    destination?: Plugin[] | undefined;\n    after?: Plugin[] | undefined;\n    utility?: Plugin[] | undefined;\n}\n */\ntype TimelinePlugins = {\n  [key in PluginType]?: Plugin[];\n};\n\nexport class Timeline {\n  plugins: TimelinePlugins = {};\n\n  add(plugin: Plugin) {\n    const { type } = plugin;\n    if (this.plugins[type]) {\n      this.plugins[type]?.push(plugin);\n    } else {\n      this.plugins[type] = [plugin];\n    }\n    const settings = plugin.analytics?.settings.get();\n    let hasInitialSettings = false;\n    if (settings !== undefined) {\n      plugin.update({ integrations: settings }, UpdateType.initial);\n      hasInitialSettings = true;\n    }\n\n    plugin.analytics?.settings.onChange((newSettings) => {\n      if (newSettings !== undefined) {\n        plugin.update(\n          { integrations: newSettings },\n          hasInitialSettings ? UpdateType.refresh : UpdateType.initial\n        );\n        hasInitialSettings = true;\n      }\n    });\n  }\n\n  remove(plugin: Plugin) {\n    const plugins = this.plugins[plugin.type];\n    if (plugins) {\n      const index = plugins.findIndex((f) => f === plugin);\n      if (index > -1) {\n        plugins.splice(index, 1);\n      }\n    }\n  }\n\n  apply(closure: (plugin: Plugin) => void) {\n    getAllPlugins(this).forEach((plugin) => closure(plugin));\n  }\n\n  process(incomingEvent: SegmentEvent) {\n    // apply .before and .enrichment types first ...\n    const beforeResult = this.applyPlugins({\n      type: PluginType.before,\n      event: incomingEvent,\n    });\n\n    if (beforeResult === undefined) {\n      return;\n    }\n    // .enrichment here is akin to source middleware in the old analytics-ios.\n    const enrichmentResult = this.applyPlugins({\n      type: PluginType.enrichment,\n      event: beforeResult,\n    });\n\n    // once the event enters a destination, we don't want\n    // to know about changes that happen there. those changes\n    // are to only be received by the destination.\n    this.applyPlugins({\n      type: PluginType.destination,\n      event: enrichmentResult,\n    });\n\n    // apply .after plugins ...\n    let afterResult = this.applyPlugins({\n      type: PluginType.after,\n      event: enrichmentResult,\n    });\n\n    return afterResult;\n  }\n\n  applyPlugins({ type, event }: { type: PluginType; event: SegmentEvent }) {\n    let result: SegmentEvent | undefined = event;\n\n    const plugins = this.plugins[type];\n    if (plugins) {\n      plugins.forEach((plugin) => {\n        if (result) {\n          result = plugin.execute(result);\n        }\n      });\n    }\n    return result;\n  }\n}\n"]}