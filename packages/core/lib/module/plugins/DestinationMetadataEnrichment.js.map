{"version":3,"sources":["DestinationMetadataEnrichment.ts"],"names":["UtilityPlugin","PluginType","DestinationMetadataEnrichment","constructor","destinationKey","enrichment","execute","event","pluginSettings","analytics","settings","get","plugins","getPlugins","destination","undefined","destinations","map","plugin","key","bundled","Object","keys","includes","push","unbundled","segmentInfo","unbundledIntegrations","integration","enrichedEvent","_metadata","bundledIds"],"mappings":";;AAAA,SAA4BA,aAA5B,QAAiD,WAAjD;AACA,SAASC,UAAT,QAAyC,UAAzC;AAEA,OAAO,MAAMC,6BAAN,SAA4CF,aAA5C,CAA0D;AAK/DG,EAAAA,WAAW,CAACC,cAAD,EAAyB;AAClC;;AADkC,kCAJ7BH,UAAU,CAACI,UAIkB;;AAAA;;AAElC,SAAKD,cAAL,GAAsBA,cAAtB;AACD;;AAEDE,EAAAA,OAAO,CAACC,KAAD,EAAoC;AAAA;;AACzC,UAAMC,cAAc,sBAAG,KAAKC,SAAR,oDAAG,gBAAgBC,QAAhB,CAAyBC,GAAzB,EAAvB;AACA,UAAMC,OAAO,uBAAG,KAAKH,SAAR,qDAAG,iBAAgBI,UAAhB,CAA2BZ,UAAU,CAACa,WAAtC,CAAhB;;AAEA,QAAIN,cAAc,KAAKO,SAAvB,EAAkC;AAChC,aAAOR,KAAP;AACD,KANwC,CAQzC;;;AACA,UAAMS,YAAY,mBAChBJ,OADgB,aAChBA,OADgB,uBAChBA,OAAO,CAAEK,GAAT,CAAcC,MAAD,IAAaA,MAAD,CAA8BC,GAAvD,CADgB,uDAC+C,EADjE;AAEA,UAAMC,OAAiB,GAAG,EAA1B;;AAEA,SAAK,MAAMD,GAAX,IAAkBH,YAAlB,EAAgC;AAC9B,UAAIG,GAAG,KAAK,KAAKf,cAAjB,EAAiC;AAC/B;AACD;;AAED,UAAIiB,MAAM,CAACC,IAAP,CAAYd,cAAZ,EAA4Be,QAA5B,CAAqCJ,GAArC,CAAJ,EAA+C;AAC7CC,QAAAA,OAAO,CAACI,IAAR,CAAaL,GAAb;AACD;AACF;;AAED,UAAMM,SAAmB,GAAG,EAA5B;AACA,UAAMC,WAAW,WACdlB,cAAc,CAAC,KAAKJ,cAAN,CADA,uCACiD,EADlE;AAEA,UAAMuB,qBAA+B,4BACnCD,WAAW,CAACC,qBADuB,yEACE,EADvC;;AAGA,SAAK,MAAMC,WAAX,IAA0BD,qBAA1B,EAAiD;AAC/C,UAAI,CAACP,OAAO,CAACG,QAAR,CAAiBK,WAAjB,CAAL,EAAoC;AAClCH,QAAAA,SAAS,CAACD,IAAV,CAAeI,WAAf;AACD;AACF,KAjCwC,CAmCzC;;;AACA,UAAMC,aAA2B,GAAG,EAClC,GAAGtB,KAD+B;AAElCuB,MAAAA,SAAS,EAAE;AACTV,QAAAA,OADS;AAETK,QAAAA,SAFS;AAGTM,QAAAA,UAAU,EAAE;AAHH;AAFuB,KAApC;AAQA,WAAOF,aAAP;AACD;;AAvD8D","sourcesContent":["import { DestinationPlugin, UtilityPlugin } from '../plugin';\nimport { PluginType, SegmentEvent } from '../types';\n\nexport class DestinationMetadataEnrichment extends UtilityPlugin {\n  type = PluginType.enrichment;\n\n  private destinationKey: string;\n\n  constructor(destinationKey: string) {\n    super();\n    this.destinationKey = destinationKey;\n  }\n\n  execute(event: SegmentEvent): SegmentEvent {\n    const pluginSettings = this.analytics?.settings.get();\n    const plugins = this.analytics?.getPlugins(PluginType.destination);\n\n    if (pluginSettings === undefined) {\n      return event;\n    }\n\n    // Disable all destinations that have a device mode plugin\n    const destinations =\n      plugins?.map((plugin) => (plugin as DestinationPlugin).key) ?? [];\n    const bundled: string[] = [];\n\n    for (const key of destinations) {\n      if (key === this.destinationKey) {\n        continue;\n      }\n\n      if (Object.keys(pluginSettings).includes(key)) {\n        bundled.push(key);\n      }\n    }\n\n    const unbundled: string[] = [];\n    const segmentInfo =\n      (pluginSettings[this.destinationKey] as Record<string, any>) ?? {};\n    const unbundledIntegrations: string[] =\n      segmentInfo.unbundledIntegrations ?? [];\n\n    for (const integration of unbundledIntegrations) {\n      if (!bundled.includes(integration)) {\n        unbundled.push(integration);\n      }\n    }\n\n    // User/event defined integrations override the cloud/device mode merge\n    const enrichedEvent: SegmentEvent = {\n      ...event,\n      _metadata: {\n        bundled,\n        unbundled,\n        bundledIds: [],\n      },\n    };\n    return enrichedEvent;\n  }\n}\n"]}