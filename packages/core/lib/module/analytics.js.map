{"version":3,"sources":["analytics.ts"],"names":["deepmerge","AppState","settingsCDN","getContext","applyRawEventData","createAliasEvent","createGroupEvent","createIdentifyEvent","createScreenEvent","createTrackEvent","InjectContext","SegmentDestination","Timeline","PluginType","UpdateType","getPluginsWithFlush","getPluginsWithReset","getUUID","SegmentClient","platformPlugins","plugins","push","config","trackAppLifecycleEvents","getPlugins","ofType","timeline","undefined","before","enrichment","utility","destination","after","getConfig","constructor","logger","store","autoAddSegmentDestination","segmentDestination","add","plugin","context","get","set","onChange","adTrackingEnabled","device","callback","settings","userInfo","events","isReady","value","onStorageReady","forEach","deepLinkData","init","isInitialized","warn","fetchSettings","flush","setupInterval","setupStorageSubscribers","setupLifecycleEvents","trackDeepLinks","checkInstalledVersion","settingsEndpoint","writeKey","res","fetch","resJson","json","integrations","info","defaultSettings","unsubscribeStorageWatchers","watchers","length","unsubscribe","e","error","cleanup","flushInterval","clearInterval","appStateSubscription","remove","destroyed","setTimeout","flushAt","addEventListener","nextAppState","handleAppStateChange","apply","closure","type","key","pluginsToAdd","addPlugin","configure","process","incomingEvent","event","pendingEvents","deepLinkProperties","trackDeepLinkEvent","data","url","properties","isAddingPlugins","debounceInterval","isPendingUpload","screen","name","options","track","eventName","identify","userId","userTraits","traits","currentUserTraits","mergedTraits","group","groupId","groupTraits","alias","newUserId","anonymousId","queueEvent","removeEvents","previousContext","onContextLoadedCallback","isContextLoaded","initial","app","version","build","previous_version","previous_build","from_background","includes","appState","reset","resetAnonymousId","onContextLoaded"],"mappings":"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","sourcesContent":["import type { Unsubscribe } from '@segment/sovran-react-native';\nimport deepmerge from 'deepmerge';\nimport { AppState, AppStateStatus } from 'react-native';\nimport { settingsCDN } from './constants';\nimport { getContext } from './context';\nimport {\n  applyRawEventData,\n  createAliasEvent,\n  createGroupEvent,\n  createIdentifyEvent,\n  createScreenEvent,\n  createTrackEvent,\n} from './events';\nimport type { Logger } from './logger';\nimport type { DestinationPlugin, PlatformPlugin, Plugin } from './plugin';\nimport { InjectContext } from './plugins/Context';\nimport { SegmentDestination } from './plugins/SegmentDestination';\nimport type { DeepLinkData, Settable, Storage, Watchable } from './storage';\nimport { Timeline } from './timeline';\nimport {\n  Config,\n  Context,\n  DeepPartial,\n  GroupTraits,\n  JsonMap,\n  PluginType,\n  SegmentAPIIntegrations,\n  SegmentAPISettings,\n  SegmentEvent,\n  UpdateType,\n  UserInfoState,\n  UserTraits,\n} from './types';\nimport { getPluginsWithFlush, getPluginsWithReset } from './util';\nimport { getUUID } from './uuid';\n\ntype OnContextLoadCallback = (type: UpdateType) => void | Promise<void>;\n\nexport class SegmentClient {\n  // the config parameters for the client - a merge of user provided and default options\n  private config: Config;\n\n  // Storage\n  private store: Storage;\n\n  // current app state\n  private appState: AppStateStatus | 'unknown' = 'unknown';\n\n  // subscription for propagating changes to appState\n  private appStateSubscription: any;\n\n  // logger\n  public logger: Logger;\n\n  // internal time to know when to flush, ticks every second\n  private flushInterval: ReturnType<typeof setInterval> | null = null;\n\n  // unsubscribe watchers for the store\n  private watchers: Unsubscribe[] = [];\n\n  // whether the user has called cleanup\n  private destroyed: boolean = false;\n\n  // has a pending upload to respond\n  private isPendingUpload: boolean = false;\n\n  private isAddingPlugins: boolean = false;\n\n  private timeline: Timeline;\n\n  private pendingEvents: SegmentEvent[] = [];\n\n  private pluginsToAdd: Plugin[] = [];\n\n  private isInitialized = false;\n\n  private isContextLoaded = false;\n\n  private onContextLoadedCallback: OnContextLoadCallback | undefined;\n\n  get platformPlugins() {\n    const plugins: PlatformPlugin[] = [];\n\n    // add context plugin as well as it's platform specific internally.\n    // this must come first.\n    plugins.push(new InjectContext());\n\n    // setup lifecycle if desired\n    if (this.config.trackAppLifecycleEvents) {\n      // todo: more plugins!\n    }\n\n    return plugins;\n  }\n\n  // Watchables\n  /**\n   * Access or subscribe to client context\n   */\n  readonly context: Watchable<DeepPartial<Context> | undefined> &\n    Settable<DeepPartial<Context>>;\n\n  /**\n   * Access or subscribe to adTrackingEnabled (also accesible from context)\n   */\n  readonly adTrackingEnabled: Watchable<boolean>;\n\n  /**\n   * Access or subscribe to integration settings\n   */\n  readonly settings: Watchable<SegmentAPIIntegrations | undefined>;\n\n  /**\n   * Access or suscribe to the events in the timeline\n   */\n  readonly events: Watchable<SegmentEvent[]>;\n\n  /**\n   * Access or subscribe to user info (anonymousId, userId, traits)\n   */\n  readonly userInfo: Watchable<UserInfoState>;\n\n  readonly deepLinkData: Watchable<DeepLinkData>;\n\n  /**\n   * Returns the plugins currently loaded in the timeline\n   * @param ofType Type of plugins, defaults to all\n   * @returns List of Plugin objects\n   */\n  getPlugins(ofType?: PluginType): readonly Plugin[] {\n    const plugins = { ...this.timeline.plugins };\n    if (ofType !== undefined) {\n      return [...(plugins[ofType] ?? [])];\n    }\n    return (\n      [\n        ...this.getPlugins(PluginType.before),\n        ...this.getPlugins(PluginType.enrichment),\n        ...this.getPlugins(PluginType.utility),\n        ...this.getPlugins(PluginType.destination),\n        ...this.getPlugins(PluginType.after),\n      ] ?? []\n    );\n  }\n\n  /**\n   * Retrieves a copy of the current client configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  constructor({\n    config,\n    logger,\n    store,\n  }: {\n    config: Config;\n    logger: Logger;\n    store: any;\n  }) {\n    this.logger = logger;\n    this.config = config;\n    this.store = store;\n    this.timeline = new Timeline();\n\n    // add segment destination plugin unless\n    // asked not to via configuration.\n    if (this.config.autoAddSegmentDestination) {\n      const segmentDestination = new SegmentDestination();\n      this.add({ plugin: segmentDestination });\n    }\n\n    // Initialize the watchables\n    this.context = {\n      get: this.store.context.get,\n      set: this.store.context.set,\n      onChange: this.store.context.onChange,\n    };\n\n    this.adTrackingEnabled = {\n      get: () => this.store.context.get()?.device?.adTrackingEnabled ?? false,\n      onChange: (callback: (value: boolean) => void) =>\n        this.store.context.onChange((context?: DeepPartial<Context>) => {\n          callback(context?.device?.adTrackingEnabled ?? false);\n        }),\n    };\n\n    this.settings = {\n      get: this.store.settings.get,\n      onChange: this.store.settings.onChange,\n    };\n\n    this.userInfo = {\n      get: this.store.userInfo.get,\n      onChange: this.store.userInfo.onChange,\n    };\n\n    this.events = {\n      get: this.store.events.get,\n      onChange: this.store.events.onChange,\n    };\n\n    // Watch for isReady so that we can handle any pending events\n    // Delays events processing in the timeline until the store is ready to prevent missing data injected from the plugins\n    this.store.isReady.onChange((value) => this.onStorageReady(value));\n\n    // Setup platform specific plugins\n    this.platformPlugins.forEach((plugin) => this.add({ plugin: plugin }));\n    this.deepLinkData = {\n      get: this.store.deepLinkData.get,\n      onChange: this.store.deepLinkData.onChange,\n    };\n  }\n\n  /**\n   * Initializes the client plugins, settings and subscribers.\n   * Can only be called once.\n   */\n  async init() {\n    if (this.isInitialized) {\n      this.logger.warn('SegmentClient already initialized');\n      return;\n    }\n\n    await this.fetchSettings();\n\n    // flush any stored events\n    this.flush(false);\n\n    // set up the timer/subscription for knowing when to flush events\n    this.setupInterval();\n    this.setupStorageSubscribers();\n\n    // set up tracking for lifecycle events\n    this.setupLifecycleEvents();\n\n    // check if the app was opened from a deep link\n    await this.trackDeepLinks();\n\n    // save the current installed version\n    await this.checkInstalledVersion();\n\n    this.isInitialized = true;\n  }\n\n  async fetchSettings() {\n    const settingsEndpoint = `${settingsCDN}/${this.config.writeKey}/settings`;\n\n    try {\n      const res = await fetch(settingsEndpoint);\n      const resJson = await res.json();\n      const integrations = resJson.integrations;\n      this.logger.info(`Received settings from Segment succesfully.`);\n      this.store.settings.set(integrations);\n    } catch {\n      this.logger.warn(\n        `Could not receive settings from Segment. ${\n          this.config.defaultSettings\n            ? 'Will use the default settings.'\n            : 'Device mode destinations will be ignored unless you specify default settings in the client config.'\n        }`\n      );\n      if (this.config.defaultSettings) {\n        this.store.settings.set(this.config.defaultSettings);\n      }\n    }\n  }\n\n  /**\n   * Clears all subscriptions to the store\n   */\n  private unsubscribeStorageWatchers() {\n    if (this.watchers.length > 0) {\n      for (const unsubscribe of this.watchers) {\n        try {\n          unsubscribe();\n        } catch (e) {\n          this.logger.error(e);\n        }\n      }\n    }\n  }\n\n  /**\n   * There is no garbage collection in JS, which means that any listeners, timeouts and subscriptions\n   * would run until the application closes\n   *\n   * This method exists in case the user for some reason needs to recreate the class instance during runtime.\n   * In this case, they should run client.cleanup() to destroy the listeners in the old client before creating a new one.\n   *\n   * There is a Stage 3 EMCAScript proposal to add a user-defined finalizer, which we could potentially switch to if\n   * it gets approved: https://github.com/tc39/proposal-weakrefs#finalizers\n   */\n  cleanup() {\n    if (this.flushInterval) {\n      clearInterval(this.flushInterval);\n    }\n\n    this.unsubscribeStorageWatchers();\n\n    this.appStateSubscription?.remove();\n\n    this.destroyed = true;\n    this.isInitialized = false;\n  }\n\n  private setupInterval() {\n    if (this.flushInterval !== null && this.flushInterval !== undefined) {\n      clearInterval(this.flushInterval);\n    }\n\n    this.flushInterval = setTimeout(() => {\n      this.flush();\n    }, this.config.flushInterval! * 1000);\n  }\n\n  private setupStorageSubscribers() {\n    this.unsubscribeStorageWatchers();\n\n    this.watchers.push(\n      this.store.events.onChange((events: SegmentEvent[]) => {\n        if (events.length >= this.config.flushAt!) {\n          this.flush();\n        }\n      })\n    );\n  }\n\n  private setupLifecycleEvents() {\n    this.appStateSubscription?.remove();\n\n    this.appStateSubscription = AppState.addEventListener(\n      'change',\n      (nextAppState) => {\n        this.handleAppStateChange(nextAppState);\n      }\n    );\n  }\n\n  /**\n     Applies the supplied closure to the currently loaded set of plugins.\n     NOTE: This does not apply to plugins contained within DestinationPlugins.\n\n     - Parameter closure: A closure that takes an plugin to be operated on as a parameter.\n\n  */\n  apply(closure: (plugin: Plugin) => void) {\n    this.timeline.apply(closure);\n  }\n\n  /**\n   * Adds a new plugin to the currently loaded set.\n   * @param {{ plugin: Plugin, settings?: SegmentAPISettings }} Plugin to be added. Settings are optional if you want to force a configuration instead of the Segment Cloud received one\n   */\n  add({\n    plugin,\n    settings,\n  }: {\n    plugin: Plugin;\n    settings?: Plugin extends DestinationPlugin ? SegmentAPISettings : never;\n  }) {\n    // plugins can either be added immediately or\n    // can be cached and added later during the next state update\n    // this is to avoid adding plugins before network requests made as part of setup have resolved\n    if (settings !== undefined && plugin.type === PluginType.destination) {\n      this.store.settings.add((plugin as DestinationPlugin).key, settings);\n    }\n\n    if (!this.store.isReady.get()) {\n      this.pluginsToAdd.push(plugin);\n    } else {\n      this.addPlugin(plugin);\n    }\n  }\n\n  private addPlugin(plugin: Plugin) {\n    plugin.configure(this);\n    this.timeline.add(plugin);\n  }\n\n  /**\n     Removes and unloads plugins with a matching name from the system.\n\n     - Parameter pluginName: An plugin name.\n  */\n  remove({ plugin }: { plugin: Plugin }) {\n    this.timeline.remove(plugin);\n  }\n\n  process(incomingEvent: SegmentEvent) {\n    const event = applyRawEventData(incomingEvent, this.store.userInfo.get());\n    if (this.store.isReady.get() === true) {\n      this.timeline.process(event);\n    } else {\n      this.pendingEvents.push(event);\n    }\n  }\n\n  private async trackDeepLinks() {\n    if (this.getConfig().trackDeepLinks === true) {\n      const deepLinkProperties = this.store.deepLinkData.get();\n      this.trackDeepLinkEvent(deepLinkProperties);\n\n      this.store.deepLinkData.onChange((data) => {\n        this.trackDeepLinkEvent(data);\n      });\n    }\n  }\n\n  private trackDeepLinkEvent(deepLinkProperties: DeepLinkData) {\n    if (deepLinkProperties.url !== '') {\n      const event = createTrackEvent({\n        event: 'Deep Link Opened',\n        properties: {\n          ...deepLinkProperties,\n        },\n      });\n\n      this.process(event);\n      this.logger.info('TRACK (Deep Link Opened) event saved', event);\n    }\n  }\n\n  /**\n   * Executes when the state store is initialized.\n   * @param isReady\n   */\n  private onStorageReady(isReady: boolean) {\n    if (isReady) {\n      // Add all plugins awaiting store\n      if (this.pluginsToAdd.length > 0 && !this.isAddingPlugins) {\n        this.isAddingPlugins = true;\n        try {\n          // start by adding the plugins\n          this.pluginsToAdd.forEach((plugin) => {\n            this.addPlugin(plugin);\n          });\n\n          // now that they're all added, clear the cache\n          // this prevents this block running for every update\n          this.pluginsToAdd = [];\n        } finally {\n          this.isAddingPlugins = false;\n        }\n      }\n\n      // Send all events in the queue\n      for (const e of this.pendingEvents) {\n        this.timeline.process(e);\n      }\n      this.pendingEvents = [];\n    }\n  }\n\n  async flush(debounceInterval: boolean = true) {\n    if (this.destroyed) {\n      return;\n    }\n\n    if (debounceInterval) {\n      // Reset interval\n      this.setupInterval();\n    }\n\n    if (!this.isPendingUpload) {\n      this.isPendingUpload = true;\n      try {\n        const events = this.store.events.get();\n\n        if (events.length > 0) {\n          getPluginsWithFlush(this.timeline).forEach((plugin) =>\n            plugin.flush()\n          );\n        }\n      } finally {\n        this.isPendingUpload = false;\n      }\n    }\n  }\n\n  screen(name: string, options?: JsonMap) {\n    const event = createScreenEvent({\n      name,\n      properties: options,\n    });\n\n    this.process(event);\n    this.logger.info('SCREEN event saved', event);\n  }\n\n  track(eventName: string, options?: JsonMap) {\n    const event = createTrackEvent({\n      event: eventName,\n      properties: options,\n    });\n\n    this.process(event);\n    this.logger.info('TRACK event saved', event);\n  }\n\n  identify(userId?: string, userTraits?: UserTraits) {\n    const userInfo = this.store.userInfo.get();\n    const { traits: currentUserTraits } = userInfo;\n\n    const mergedTraits = {\n      ...currentUserTraits,\n      ...userTraits,\n    };\n\n    const event = createIdentifyEvent({\n      userId,\n      userTraits: mergedTraits,\n    });\n\n    this.store.userInfo.set({\n      ...userInfo,\n      userId: userId ?? userInfo.userId,\n      traits: mergedTraits,\n    });\n\n    this.process(event);\n    this.logger.info('IDENTIFY event saved', event);\n  }\n\n  group(groupId: string, groupTraits?: GroupTraits) {\n    const event = createGroupEvent({\n      groupId,\n      groupTraits,\n    });\n\n    this.process(event);\n    this.logger.info('GROUP event saved', event);\n  }\n\n  alias(newUserId: string) {\n    const { anonymousId, userId } = this.userInfo.get();\n    const event = createAliasEvent({\n      anonymousId,\n      userId,\n      newUserId,\n    });\n\n    this.store.userInfo.set({\n      ...this.store.userInfo.get(),\n      userId: newUserId,\n    });\n\n    this.process(event);\n    this.logger.info('ALIAS event saved', event);\n  }\n\n  queueEvent(event: SegmentEvent) {\n    this.store.events.add(event);\n  }\n\n  removeEvents(event: SegmentEvent | SegmentEvent[]) {\n    this.store.events.remove(event);\n  }\n\n  /**\n   * Called once when the client is first created\n   *\n   * Detect and save the the currently installed application version\n   * Send application lifecycle events if trackAppLifecycleEvents is enabled\n   *\n   * Exactly one of these events will be sent, depending on the current and previous version:s\n   * Application Installed - no information on the previous version, so it's a fresh install\n   * Application Updated - the previous detected version is different from the current version\n   * Application Opened - the previously detected version is same as the current version\n   */\n  private async checkInstalledVersion() {\n    const context = await getContext(undefined, this.config);\n\n    const previousContext = this.store.context.get();\n\n    // Only overwrite the previous context values to preserve any values that are added by enrichment plugins like IDFA\n    await this.store.context.set(deepmerge(previousContext ?? {}, context));\n\n    // Only callback during the intial context load\n    if (this.onContextLoadedCallback !== undefined && !this.isContextLoaded) {\n      this.onContextLoadedCallback(UpdateType.initial);\n    }\n\n    this.isContextLoaded = true;\n    if (!this.config.trackAppLifecycleEvents) {\n      return;\n    }\n\n    if (previousContext?.app === undefined) {\n      const event = createTrackEvent({\n        event: 'Application Installed',\n        properties: {\n          version: context.app.version,\n          build: context.app.build,\n        },\n      });\n      this.process(event);\n      this.logger.info('TRACK (Application Installed) event saved', event);\n    } else if (context.app.version !== previousContext.app.version) {\n      const event = createTrackEvent({\n        event: 'Application Updated',\n        properties: {\n          version: context.app.version,\n          build: context.app.build,\n          previous_version: previousContext.app.version,\n          previous_build: previousContext.app.build,\n        },\n      });\n      this.process(event);\n      this.logger.info('TRACK (Application Updated) event saved', event);\n    }\n\n    const event = createTrackEvent({\n      event: 'Application Opened',\n      properties: {\n        from_background: false,\n        version: context.app.version,\n        build: context.app.build,\n      },\n    });\n    this.process(event);\n    this.logger.info('TRACK (Application Opened) event saved', event);\n  }\n\n  /**\n   * AppState event listener. Called whenever the app state changes.\n   *\n   * Send application lifecycle events if trackAppLifecycleEvents is enabled.\n   *\n   * Application Opened - only when the app state changes from 'inactive' or 'background' to 'active'\n   *   The initial event from 'unknown' to 'active' is handled on launch in checkInstalledVersion\n   * Application Backgrounded - when the app state changes from 'inactive' or 'background' to 'active\n   *\n   * @param nextAppState 'active', 'inactive', 'background' or 'unknown'\n   */\n  private handleAppStateChange(nextAppState: AppStateStatus) {\n    if (this.config.trackAppLifecycleEvents) {\n      if (\n        ['inactive', 'background'].includes(this.appState) &&\n        nextAppState === 'active'\n      ) {\n        const context = this.store.context.get();\n        const event = createTrackEvent({\n          event: 'Application Opened',\n          properties: {\n            from_background: true,\n            version: context?.app?.version,\n            build: context?.app?.build,\n          },\n        });\n        this.process(event);\n        this.logger.info('TRACK (Application Opened) event saved', event);\n      } else if (\n        this.appState === 'active' &&\n        ['inactive', 'background'].includes(nextAppState)\n      ) {\n        const event = createTrackEvent({\n          event: 'Application Backgrounded',\n        });\n        this.process(event);\n        this.logger.info('TRACK (Application Backgrounded) event saved', event);\n      }\n    }\n\n    this.appState = nextAppState;\n  }\n\n  reset(resetAnonymousId: boolean = true) {\n    const anonymousId =\n      resetAnonymousId === true\n        ? getUUID()\n        : this.store.userInfo.get().anonymousId;\n\n    this.store.userInfo.set({\n      anonymousId,\n      userId: undefined,\n      traits: undefined,\n    });\n\n    getPluginsWithReset(this.timeline).forEach((plugin) => plugin.reset());\n\n    this.logger.info('Client has been reset');\n  }\n\n  /**\n   * Registers a callback for when the client has loaded the device context. This happens at the startup of the app, but\n   * it is handy for plugins that require context data during configure as it guarantees the context data is available.\n   *\n   * If the context is already loaded it will call the callback immediately.\n   *\n   * @param callback Function to call when context is ready.\n   */\n  onContextLoaded(callback: OnContextLoadCallback) {\n    this.onContextLoadedCallback = callback;\n    if (this.isContextLoaded) {\n      this.onContextLoadedCallback(UpdateType.initial);\n    }\n  }\n}\n"]}