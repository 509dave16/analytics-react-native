{"version":3,"sources":["sovranStorage.ts"],"names":["DEFAULT_STORE_NAME","INITIAL_VALUES","isReady","events","eventsToRetry","context","settings","userInfo","anonymousId","userId","undefined","traits","deepLinkStore","referring_application","url","addDeepLinkData","deepLinkData","store","actions","SovranStorage","constructor","config","fixUnsubscribe","userInfoStore","subscribe","dispatch","state","get","ready","readinessStore","getState","hasLoadedContext","onChange","callback","contextStore","set","value","settingsStore","add","key","storeId","storePersistor","persist","persistor","fixAnonymousId","unsubscribeContext"],"mappings":";;;;;;;AAAA;;AAMA;;AASA;;;;;;AAGA;AACA;AACA,MAAMA,kBAAkB,GAAG,SAA3B;AAUA,MAAMC,cAAoB,GAAG;AAC3BC,EAAAA,OAAO,EAAE,IADkB;AAE3BC,EAAAA,MAAM,EAAE,EAFmB;AAG3BC,EAAAA,aAAa,EAAE,EAHY;AAI3BC,EAAAA,OAAO,EAAE,EAJkB;AAK3BC,EAAAA,QAAQ,EAAE,EALiB;AAM3BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,oBADL;AAERC,IAAAA,MAAM,EAAEC,SAFA;AAGRC,IAAAA,MAAM,EAAED;AAHA;AANiB,CAA7B;;AAiBA;AACA;AACA;AACA;AACA;AACA,MAAME,aAAa,GAAG,oCAA0B;AAC9CC,EAAAA,qBAAqB,EAAE,EADuB;AAE9CC,EAAAA,GAAG,EAAE;AAFyC,CAA1B,CAAtB;AAKA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAIC,YAAD,IAAgC,MAAM;AAC5D,SAAO;AACLH,IAAAA,qBAAqB,EAAEG,YAAY,CAACH,qBAD/B;AAELC,IAAAA,GAAG,EAAEE,YAAY,CAACF;AAFb,GAAP;AAID,CALD;AAOA;AACA;AACA;;;AACA,4CAAoB;AAClBG,EAAAA,KAAK,EAAEL,aADW;AAElBM,EAAAA,OAAO,EAAE;AACP,yBAAqBH;AADd;AAFS,CAApB;;AAOO,MAAMI,aAAN,CAAuC;AAS5CC,EAAAA,WAAW,CAACC,MAAD,EAAwB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,2CAFUT,aAEV;;AAAA,4CA2DV,MAAM;AAC7B,YAAMU,cAAc,GAAG,KAAKC,aAAL,CAAmBC,SAAnB,CAA8BP,KAAD,IAAW;AAC7D,YAAIA,KAAK,CAACV,QAAN,CAAeC,WAAf,KAA+B,aAAnC,EAAkD;AAChD,eAAKe,aAAL,CAAmBE,QAAnB,CAA6BC,KAAD,IAAW;AACrC,mBAAO;AACLnB,cAAAA,QAAQ,EAAE,EAAE,GAAGmB,KAAK,CAACnB,QAAX;AAAqBC,gBAAAA,WAAW,EAAE;AAAlC;AADL,aAAP;AAGD,WAJD;AAKD;;AACDc,QAAAA,cAAc;AACf,OATsB,CAAvB;AAUD,KAtEkC;;AAAA,qCAyEhB;AACjBK,MAAAA,GAAG,EAAE,MAAM;AACT,cAAMC,KAAK,GAAG,KAAKC,cAAL,CAAoBC,QAApB,EAAd;AACA,eAAOF,KAAK,CAACG,gBAAb;AACD,OAJgB;AAKjBC,MAAAA,QAAQ,EAAGC,QAAD,IAAwC;AAChD,eAAO,KAAKJ,cAAL,CAAoBL,SAApB,CAA+BP,KAAD,IAAW;AAC9C,cAAIA,KAAK,CAACc,gBAAV,EAA4B;AAC1BE,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,SAJM,CAAP;AAKD;AAXgB,KAzEgB;;AAAA,qCAuFhB;AACjBN,MAAAA,GAAG,EAAE,MAAM,KAAKO,YAAL,CAAkBJ,QAAlB,GAA6BzB,OADvB;AAEjB2B,MAAAA,QAAQ,EAAGC,QAAD,IACR,KAAKC,YAAL,CAAkBV,SAAlB,CAA6BP,KAAD,IAAWgB,QAAQ,CAAChB,KAAK,CAACZ,OAAP,CAA/C,CAHe;AAIjB8B,MAAAA,GAAG,EAAE,MAAOC,KAAP,IAAuC;AAC1C,cAAM;AAAE/B,UAAAA;AAAF,YAAc,MAAM,KAAK6B,YAAL,CAAkBT,QAAlB,CAA4BC,KAAD,IAAW;AAC9D,iBAAO;AAAErB,YAAAA,OAAO,EAAE,wBAAUqB,KAAK,CAACrB,OAAhB,EAAyB+B,KAAzB;AAAX,WAAP;AACD,SAFyB,CAA1B;AAGA,eAAO/B,OAAP;AACD;AATgB,KAvFgB;;AAAA,sCAkGf;AAClBsB,MAAAA,GAAG,EAAE,MAAM,KAAKU,aAAL,CAAmBP,QAAnB,GAA8BxB,QADvB;AAElB0B,MAAAA,QAAQ,EACNC,QADQ,IAEL,KAAKI,aAAL,CAAmBb,SAAnB,CAA8BP,KAAD,IAAWgB,QAAQ,CAAChB,KAAK,CAACX,QAAP,CAAhD,CAJa;AAKlB6B,MAAAA,GAAG,EAAE,MAAOC,KAAP,IAAyC;AAC5C,cAAM;AAAE9B,UAAAA;AAAF,YAAe,MAAM,KAAK+B,aAAL,CAAmBZ,QAAnB,CAA6BC,KAAD,IAAW;AAChE,iBAAO;AAAEpB,YAAAA,QAAQ,EAAE,EAAE,GAAGoB,KAAK,CAACpB,QAAX;AAAqB,iBAAG8B;AAAxB;AAAZ,WAAP;AACD,SAF0B,CAA3B;AAGA,eAAO9B,QAAP;AACD,OAViB;AAWlBgC,MAAAA,GAAG,EAAE,CAACC,GAAD,EAAcH,KAAd,KAA6C;AAChD,aAAKC,aAAL,CAAmBZ,QAAnB,CAA6BC,KAAD,KAAY;AACtCpB,UAAAA,QAAQ,EAAE,EAAE,GAAGoB,KAAK,CAACpB,QAAX;AAAqB,aAACiC,GAAD,GAAOH;AAA5B;AAD4B,SAAZ,CAA5B;AAGD;AAfiB,KAlGe;;AAAA,sCAoHf;AAClBT,MAAAA,GAAG,EAAE,MAAM,KAAKJ,aAAL,CAAmBO,QAAnB,GAA8BvB,QADvB;AAElByB,MAAAA,QAAQ,EAAGC,QAAD,IACR,KAAKV,aAAL,CAAmBC,SAAnB,CAA8BP,KAAD,IAAWgB,QAAQ,CAAChB,KAAK,CAACV,QAAP,CAAhD,CAHgB;AAIlB4B,MAAAA,GAAG,EAAE,MAAOC,KAAP,IAAgC;AACnC,cAAM;AAAE7B,UAAAA;AAAF,YAAe,MAAM,KAAKgB,aAAL,CAAmBE,QAAnB,CAA6BC,KAAD,KAAY;AACjEnB,UAAAA,QAAQ,EAAE,EAAE,GAAGmB,KAAK,CAACnB,QAAX;AAAqB,eAAG6B;AAAxB;AADuD,SAAZ,CAA5B,CAA3B;AAGA,eAAO7B,QAAP;AACD;AATiB,KApHe;;AAAA,0CAgIX;AACtBoB,MAAAA,GAAG,EAAE,MAAM,KAAKf,aAAL,CAAmBkB,QAAnB,EADW;AAEtBE,MAAAA,QAAQ,EAAGC,QAAD,IACR,KAAKrB,aAAL,CAAmBY,SAAnB,CAA6BS,QAA7B;AAHoB,KAhIW;;AACjC,SAAKO,OAAL,GAAenB,MAAM,CAACmB,OAAtB;AACA,SAAKC,cAAL,GAAsBpB,MAAM,CAACoB,cAA7B;AACA,SAAKZ,cAAL,GAAsB,oCACpB;AACEE,MAAAA,gBAAgB,EAAE;AADpB,KADoB,EAIpB;AACEW,MAAAA,OAAO,EAAE;AACPF,QAAAA,OAAO,EAAExC,kBADF;AAEP2C,QAAAA,SAAS,EAAE,KAAKF;AAFT;AADX,KAJoB,CAAtB;AAWA,SAAKP,YAAL,GAAoB,oCAClB;AAAE7B,MAAAA,OAAO,EAAEJ,cAAc,CAACI;AAA1B,KADkB,EAElB;AACEqC,MAAAA,OAAO,EAAE;AACPF,QAAAA,OAAO,EAAG,GAAE,KAAKA,OAAQ,UADlB;AAEPG,QAAAA,SAAS,EAAE,KAAKF;AAFT;AADX,KAFkB,CAApB;AASA,SAAKJ,aAAL,GAAqB,oCACnB;AAAE/B,MAAAA,QAAQ,EAAEL,cAAc,CAACK;AAA3B,KADmB,EAEnB;AACEoC,MAAAA,OAAO,EAAE;AACPF,QAAAA,OAAO,EAAG,GAAE,KAAKA,OAAQ,WADlB;AAEPG,QAAAA,SAAS,EAAE,KAAKF;AAFT;AADX,KAFmB,CAArB;AASA,SAAKlB,aAAL,GAAqB,oCACnB;AAAEhB,MAAAA,QAAQ,EAAEN,cAAc,CAACM;AAA3B,KADmB,EAEnB;AACEmC,MAAAA,OAAO,EAAE;AACPF,QAAAA,OAAO,EAAG,GAAE,KAAKA,OAAQ,WADlB;AAEPG,QAAAA,SAAS,EAAE,KAAKF;AAFT;AADX,KAFmB,CAArB;AAUA,SAAKG,cAAL,GA1CiC,CA4CjC;;AACA,UAAMC,kBAAkB,GAAG,KAAKX,YAAL,CAAkBV,SAAlB,CAA6BP,KAAD,IAAW;AAChE,UAAIA,KAAK,CAACZ,OAAN,KAAkBJ,cAAc,CAACI,OAArC,EAA8C;AAC5C,aAAKwB,cAAL,CAAoBJ,QAApB,CAA8BC,KAAD,KAAY,EACvC,GAAGA,KADoC;AAEvCK,UAAAA,gBAAgB,EAAE;AAFqB,SAAZ,CAA7B;AAIAc,QAAAA,kBAAkB;AACnB;AACF,KAR0B,CAA3B;AASD;AAED;AACF;AACA;;;AAnE8C","sourcesContent":["import {\n  createStore,\n  registerBridgeStore,\n  Store,\n  Persistor,\n} from '@segment/sovran-react-native';\nimport deepmerge from 'deepmerge';\nimport type {\n  SegmentAPIIntegrations,\n  IntegrationSettings,\n  SegmentEvent,\n  DeepPartial,\n  Context,\n  UserInfoState,\n} from '..';\nimport { getUUID } from '../uuid';\nimport type { Storage, StorageConfig, DeepLinkData } from './types';\n\n// NOTE: Not exported from @segment/sovran-react-native. Must explicitly declare here.\n// Also this fallback is used in store.ts in @segment/sovran-react-native yet \"storeId\" is required.\nconst DEFAULT_STORE_NAME = 'default';\n\ntype Data = {\n  isReady: boolean;\n  events: SegmentEvent[];\n  eventsToRetry: SegmentEvent[];\n  context: DeepPartial<Context>;\n  settings: SegmentAPIIntegrations;\n  userInfo: UserInfoState;\n};\nconst INITIAL_VALUES: Data = {\n  isReady: true,\n  events: [],\n  eventsToRetry: [],\n  context: {},\n  settings: {},\n  userInfo: {\n    anonymousId: getUUID(),\n    userId: undefined,\n    traits: undefined,\n  },\n};\n\ninterface ReadinessStore {\n  hasLoadedContext: boolean;\n}\n\n/**\n * Global store for deeplink information\n * A single instance is needed for all SovranStorage objects since only one deeplink data exists at a time\n * No need to persist this information\n */\nconst deepLinkStore = createStore<DeepLinkData>({\n  referring_application: '',\n  url: '',\n});\n\n/**\n * Action to set the referring app and link url\n * @param deepLinkData referring app and link url\n */\nconst addDeepLinkData = (deepLinkData: DeepLinkData) => () => {\n  return {\n    referring_application: deepLinkData.referring_application,\n    url: deepLinkData.url,\n  };\n};\n\n/**\n * Registers the deeplink store to listen to native events\n */\nregisterBridgeStore({\n  store: deepLinkStore,\n  actions: {\n    'add-deepLink-data': addDeepLinkData,\n  },\n});\n\nexport class SovranStorage implements Storage {\n  private storeId: string;\n  private storePersistor?: Persistor;\n  private readinessStore: Store<ReadinessStore>;\n  private contextStore: Store<{ context: DeepPartial<Context> }>;\n  private settingsStore: Store<{ settings: SegmentAPIIntegrations }>;\n  private userInfoStore: Store<{ userInfo: UserInfoState }>;\n  private deepLinkStore: Store<DeepLinkData> = deepLinkStore;\n\n  constructor(config: StorageConfig) {\n    this.storeId = config.storeId;\n    this.storePersistor = config.storePersistor;\n    this.readinessStore = createStore<ReadinessStore>(\n      {\n        hasLoadedContext: false,\n      },\n      {\n        persist: {\n          storeId: DEFAULT_STORE_NAME,\n          persistor: this.storePersistor,\n        },\n      }\n    );\n    this.contextStore = createStore(\n      { context: INITIAL_VALUES.context },\n      {\n        persist: {\n          storeId: `${this.storeId}-context`,\n          persistor: this.storePersistor,\n        },\n      }\n    );\n    this.settingsStore = createStore(\n      { settings: INITIAL_VALUES.settings },\n      {\n        persist: {\n          storeId: `${this.storeId}-settings`,\n          persistor: this.storePersistor,\n        },\n      }\n    );\n    this.userInfoStore = createStore(\n      { userInfo: INITIAL_VALUES.userInfo },\n      {\n        persist: {\n          storeId: `${this.storeId}-userInfo`,\n          persistor: this.storePersistor,\n        },\n      }\n    );\n\n    this.fixAnonymousId();\n\n    // Wait for context to be loaded\n    const unsubscribeContext = this.contextStore.subscribe((store) => {\n      if (store.context !== INITIAL_VALUES.context) {\n        this.readinessStore.dispatch((state) => ({\n          ...state,\n          hasLoadedContext: true,\n        }));\n        unsubscribeContext();\n      }\n    });\n  }\n\n  /**\n   * This is a fix for users that have started the app with the anonymousId set to 'anonymousId' bug\n   */\n  private fixAnonymousId = () => {\n    const fixUnsubscribe = this.userInfoStore.subscribe((store) => {\n      if (store.userInfo.anonymousId === 'anonymousId') {\n        this.userInfoStore.dispatch((state) => {\n          return {\n            userInfo: { ...state.userInfo, anonymousId: getUUID() },\n          };\n        });\n      }\n      fixUnsubscribe();\n    });\n  };\n\n  // Check for all things that need to be ready before sending events through the timeline\n  readonly isReady = {\n    get: () => {\n      const ready = this.readinessStore.getState();\n      return ready.hasLoadedContext;\n    },\n    onChange: (callback: (value: boolean) => void) => {\n      return this.readinessStore.subscribe((store) => {\n        if (store.hasLoadedContext) {\n          callback(true);\n        }\n      });\n    },\n  };\n\n  readonly context = {\n    get: () => this.contextStore.getState().context,\n    onChange: (callback: (value?: DeepPartial<Context>) => void) =>\n      this.contextStore.subscribe((store) => callback(store.context)),\n    set: async (value: DeepPartial<Context>) => {\n      const { context } = await this.contextStore.dispatch((state) => {\n        return { context: deepmerge(state.context, value) };\n      });\n      return context;\n    },\n  };\n  readonly settings = {\n    get: () => this.settingsStore.getState().settings,\n    onChange: (\n      callback: (value?: SegmentAPIIntegrations | undefined) => void\n    ) => this.settingsStore.subscribe((store) => callback(store.settings)),\n    set: async (value: SegmentAPIIntegrations) => {\n      const { settings } = await this.settingsStore.dispatch((state) => {\n        return { settings: { ...state.settings, ...value } };\n      });\n      return settings;\n    },\n    add: (key: string, value: IntegrationSettings) => {\n      this.settingsStore.dispatch((state) => ({\n        settings: { ...state.settings, [key]: value },\n      }));\n    },\n  };\n\n  readonly userInfo = {\n    get: () => this.userInfoStore.getState().userInfo,\n    onChange: (callback: (value: UserInfoState) => void) =>\n      this.userInfoStore.subscribe((store) => callback(store.userInfo)),\n    set: async (value: UserInfoState) => {\n      const { userInfo } = await this.userInfoStore.dispatch((state) => ({\n        userInfo: { ...state.userInfo, ...value },\n      }));\n      return userInfo;\n    },\n  };\n\n  readonly deepLinkData = {\n    get: () => this.deepLinkStore.getState(),\n    onChange: (callback: (value: DeepLinkData) => void) =>\n      this.deepLinkStore.subscribe(callback),\n  };\n}\n"]}