{"version":3,"sources":["SegmentDestination.ts"],"names":["MAX_EVENTS_PER_BATCH","SEGMENT_DESTINATION_KEY","SegmentDestination","DestinationPlugin","PluginType","destination","configure","analytics","add","DestinationMetadataEnrichment","execute","event","enrichedEvent","undefined","queueEvent","flush","events","get","chunkedEvents","getConfig","maxBatchSize","sentEvents","numFailedEvents","Promise","all","map","batch","config","concat","e","console","warn","length","removeEvents","debug","info","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,oBAAoB,GAAG,GAA7B;AACO,MAAMC,uBAAuB,GAAG,YAAhC;;;AAEA,MAAMC,kBAAN,SAAiCC,yBAAjC,CAAmD;AAAA;AAAA;;AAAA,kCACjDC,kBAAWC,WADsC;;AAAA,iCAGlDJ,uBAHkD;AAAA;;AAKxDK,EAAAA,SAAS,CAACC,SAAD,EAAiC;AACxC,UAAMD,SAAN,CAAgBC,SAAhB,EADwC,CAGxC;;AACA,SAAKC,GAAL,CAAS,IAAIC,4DAAJ,CAAkCR,uBAAlC,CAAT;AACD;;AAEDS,EAAAA,OAAO,CAACC,KAAD,EAAgD;AACrD,UAAMC,aAAa,GAAG,MAAMF,OAAN,CAAcC,KAAd,CAAtB;;AACA,QAAIC,aAAa,KAAKC,SAAtB,EAAiC;AAAA;;AAC/B,8BAAKN,SAAL,oEAAgBO,UAAhB,CAA2BF,aAA3B;AACD;;AACD,WAAOA,aAAP;AACD;;AAEU,QAALG,KAAK,GAAG;AAAA;;AACZ,UAAMC,MAAM,gDAAG,KAAKT,SAAR,qDAAG,iBAAgBS,MAAhB,CAAuBC,GAAvB,EAAH,yEAAmC,EAA/C;AACA,UAAMC,aAA+B,GAAG,iBACtCF,MADsC,+CAEtC,KAAKT,SAFiC,qDAEtC,iBAAgBY,SAAhB,GAA4BC,YAFU,yEAEMpB,oBAFN,CAAxC;AAKA,QAAIqB,UAA0B,GAAG,EAAjC;AACA,QAAIC,eAAe,GAAG,CAAtB;AAEA,UAAMC,OAAO,CAACC,GAAR,CACJN,aAAa,CAACO,GAAd,CAAkB,MAAOC,KAAP,IAAiC;AACjD,UAAI;AAAA;;AACF,cAAM,qBAAW;AACfC,UAAAA,MAAM,sBAAE,KAAKpB,SAAP,qDAAE,iBAAgBY,SAAhB,EADO;AAEfH,UAAAA,MAAM,EAAEU;AAFO,SAAX,CAAN;AAIAL,QAAAA,UAAU,GAAGA,UAAU,CAACO,MAAX,CAAkBF,KAAlB,CAAb;AACD,OAND,CAME,OAAOG,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AACAP,QAAAA,eAAe,IAAII,KAAK,CAACM,MAAzB;AACD,OATD,SASU;AAAA;;AACR,iCAAKzB,SAAL,sEAAgB0B,YAAhB,CAA6BZ,UAA7B;AACD;AACF,KAbD,CADI,CAAN;;AAiBA,QAAIA,UAAU,CAACW,MAAf,EAAuB;AAAA;;AACrB,8BAAI,KAAKzB,SAAT,6CAAI,iBAAgBY,SAAhB,GAA4Be,KAAhC,EAAuC;AACrCJ,QAAAA,OAAO,CAACK,IAAR,CAAc,QAAOd,UAAU,CAACW,MAAO,SAAvC;AACD;AACF;;AAED,QAAIV,eAAJ,EAAqB;AACnBQ,MAAAA,OAAO,CAACM,KAAR,CAAe,kBAAiBd,eAAgB,UAAhD;AACD;AACF;;AAxDuD","sourcesContent":["import { DestinationPlugin } from '../plugin';\nimport { PluginType, SegmentEvent } from '../types';\nimport { chunk } from '../util';\nimport { sendEvents } from '../api';\nimport type { SegmentClient } from '../analytics';\nimport { DestinationMetadataEnrichment } from './DestinationMetadataEnrichment';\n\nconst MAX_EVENTS_PER_BATCH = 100;\nexport const SEGMENT_DESTINATION_KEY = 'Segment.io';\n\nexport class SegmentDestination extends DestinationPlugin {\n  type = PluginType.destination;\n\n  key = SEGMENT_DESTINATION_KEY;\n\n  configure(analytics: SegmentClient): void {\n    super.configure(analytics);\n\n    // Enrich events with the Destination metadata\n    this.add(new DestinationMetadataEnrichment(SEGMENT_DESTINATION_KEY));\n  }\n\n  execute(event: SegmentEvent): SegmentEvent | undefined {\n    const enrichedEvent = super.execute(event);\n    if (enrichedEvent !== undefined) {\n      this.analytics?.queueEvent(enrichedEvent);\n    }\n    return enrichedEvent;\n  }\n\n  async flush() {\n    const events = this.analytics?.events.get() ?? [];\n    const chunkedEvents: SegmentEvent[][] = chunk(\n      events,\n      this.analytics?.getConfig().maxBatchSize ?? MAX_EVENTS_PER_BATCH\n    );\n\n    let sentEvents: SegmentEvent[] = [];\n    let numFailedEvents = 0;\n\n    await Promise.all(\n      chunkedEvents.map(async (batch: SegmentEvent[]) => {\n        try {\n          await sendEvents({\n            config: this.analytics?.getConfig()!,\n            events: batch,\n          });\n          sentEvents = sentEvents.concat(batch);\n        } catch (e) {\n          console.warn(e);\n          numFailedEvents += batch.length;\n        } finally {\n          this.analytics?.removeEvents(sentEvents);\n        }\n      })\n    );\n\n    if (sentEvents.length) {\n      if (this.analytics?.getConfig().debug) {\n        console.info(`Sent ${sentEvents.length} events`);\n      }\n    }\n\n    if (numFailedEvents) {\n      console.error(`Failed to send ${numFailedEvents} events.`);\n    }\n  }\n}\n"]}