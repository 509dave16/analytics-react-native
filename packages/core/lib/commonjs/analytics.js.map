{"version":3,"sources":["analytics.ts"],"names":["allSettled","shim","SegmentClient","platformPlugins","plugins","push","InjectContext","config","trackAppLifecycleEvents","getPlugins","ofType","timeline","undefined","PluginType","before","enrichment","utility","destination","after","getConfig","constructor","logger","store","Timeline","context","get","set","onChange","adTrackingEnabled","device","callback","settings","userInfo","deepLinkData","isReady","value","onStorageReady","autoAddSegmentDestination","segmentDestination","SegmentDestination","add","plugin","forEach","init","isInitialized","warn","fetchSettings","flush","setupInterval","setupStorageSubscribers","setupLifecycleEvents","trackDeepLinks","checkInstalledVersion","settingsEndpoint","settingsCDN","writeKey","res","fetch","resJson","json","integrations","info","defaultSettings","unsubscribeStorageWatchers","watchers","length","unsubscribe","e","error","cleanup","flushInterval","clearInterval","appStateSubscription","remove","destroyed","setTimeout","AppState","addEventListener","nextAppState","handleAppStateChange","apply","closure","type","key","pluginsToAdd","addPlugin","configure","process","incomingEvent","event","pendingEvents","deepLinkProperties","trackDeepLinkEvent","data","url","properties","isAddingPlugins","debounceInterval","promises","Promise","resolve","screen","name","options","track","eventName","identify","userId","userTraits","traits","currentUserTraits","mergedTraits","group","groupId","groupTraits","alias","newUserId","anonymousId","previousContext","onContextLoadedCallback","isContextLoaded","UpdateType","initial","app","version","build","previous_version","previous_build","from_background","includes","appState","reset","resetAnonymousId","onContextLoaded"],"mappings":"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","sourcesContent":["import type { Unsubscribe } from '@segment/sovran-react-native';\nimport deepmerge from 'deepmerge';\nimport allSettled from 'promise.allsettled';\nimport { AppState, AppStateStatus } from 'react-native';\nimport { settingsCDN } from './constants';\nimport { getContext } from './context';\nimport {\n  applyRawEventData,\n  createAliasEvent,\n  createGroupEvent,\n  createIdentifyEvent,\n  createScreenEvent,\n  createTrackEvent,\n} from './events';\nimport type { Logger } from './logger';\nimport type { DestinationPlugin, PlatformPlugin, Plugin } from './plugin';\nimport { InjectContext } from './plugins/Context';\nimport { SegmentDestination } from './plugins/SegmentDestination';\nimport type { DeepLinkData, Settable, Storage, Watchable } from './storage';\nimport { Timeline } from './timeline';\nimport {\n  Config,\n  Context,\n  DeepPartial,\n  GroupTraits,\n  IntegrationSettings,\n  JsonMap,\n  PluginType,\n  SegmentAPIIntegrations,\n  SegmentEvent,\n  UpdateType,\n  UserInfoState,\n  UserTraits,\n} from './types';\nimport { getPluginsWithFlush, getPluginsWithReset } from './util';\nimport { getUUID } from './uuid';\n\n// Important! We need to polyfill Promise.allSettled because it's not supported in RN (https://github.com/facebook/react-native/issues/30236)\nallSettled.shim();\n\ntype OnContextLoadCallback = (type: UpdateType) => void | Promise<void>;\n\nexport class SegmentClient {\n  // the config parameters for the client - a merge of user provided and default options\n  private config: Config;\n\n  // Storage\n  private store: Storage;\n\n  // current app state\n  private appState: AppStateStatus | 'unknown' = 'unknown';\n\n  // subscription for propagating changes to appState\n  private appStateSubscription: any;\n\n  // logger\n  public logger: Logger;\n\n  // internal time to know when to flush, ticks every second\n  private flushInterval: ReturnType<typeof setTimeout> | null = null;\n\n  // unsubscribe watchers for the store\n  private watchers: Unsubscribe[] = [];\n\n  // whether the user has called cleanup\n  private destroyed: boolean = false;\n\n  private isAddingPlugins: boolean = false;\n\n  private timeline: Timeline;\n\n  private pendingEvents: SegmentEvent[] = [];\n\n  private pluginsToAdd: Plugin[] = [];\n\n  private isInitialized = false;\n\n  private isContextLoaded = false;\n\n  private onContextLoadedCallback: OnContextLoadCallback | undefined;\n\n  get platformPlugins() {\n    const plugins: PlatformPlugin[] = [];\n\n    // add context plugin as well as it's platform specific internally.\n    // this must come first.\n    plugins.push(new InjectContext());\n\n    // setup lifecycle if desired\n    if (this.config.trackAppLifecycleEvents) {\n      // todo: more plugins!\n    }\n\n    return plugins;\n  }\n\n  // Watchables\n  /**\n   * Access or subscribe to client context\n   */\n  readonly context: Watchable<DeepPartial<Context> | undefined> &\n    Settable<DeepPartial<Context>>;\n\n  /**\n   * Access or subscribe to adTrackingEnabled (also accesible from context)\n   */\n  readonly adTrackingEnabled: Watchable<boolean>;\n\n  /**\n   * Access or subscribe to integration settings\n   */\n  readonly settings: Watchable<SegmentAPIIntegrations | undefined>;\n\n  /**\n   * Access or subscribe to user info (anonymousId, userId, traits)\n   */\n  readonly userInfo: Watchable<UserInfoState>;\n\n  readonly deepLinkData: Watchable<DeepLinkData>;\n\n  /**\n   * Returns the plugins currently loaded in the timeline\n   * @param ofType Type of plugins, defaults to all\n   * @returns List of Plugin objects\n   */\n  getPlugins(ofType?: PluginType): readonly Plugin[] {\n    const plugins = { ...this.timeline.plugins };\n    if (ofType !== undefined) {\n      return [...(plugins[ofType] ?? [])];\n    }\n    return (\n      [\n        ...this.getPlugins(PluginType.before),\n        ...this.getPlugins(PluginType.enrichment),\n        ...this.getPlugins(PluginType.utility),\n        ...this.getPlugins(PluginType.destination),\n        ...this.getPlugins(PluginType.after),\n      ] ?? []\n    );\n  }\n\n  /**\n   * Retrieves a copy of the current client configuration\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  constructor({\n    config,\n    logger,\n    store,\n  }: {\n    config: Config;\n    logger: Logger;\n    store: any;\n  }) {\n    this.logger = logger;\n    this.config = config;\n    this.store = store;\n    this.timeline = new Timeline();\n\n    // Initialize the watchables\n    this.context = {\n      get: this.store.context.get,\n      set: this.store.context.set,\n      onChange: this.store.context.onChange,\n    };\n\n    this.adTrackingEnabled = {\n      get: () => this.store.context.get()?.device?.adTrackingEnabled ?? false,\n      onChange: (callback: (value: boolean) => void) =>\n        this.store.context.onChange((context?: DeepPartial<Context>) => {\n          callback(context?.device?.adTrackingEnabled ?? false);\n        }),\n    };\n\n    this.settings = {\n      get: this.store.settings.get,\n      onChange: this.store.settings.onChange,\n    };\n\n    this.userInfo = {\n      get: this.store.userInfo.get,\n      onChange: this.store.userInfo.onChange,\n    };\n\n    this.deepLinkData = {\n      get: this.store.deepLinkData.get,\n      onChange: this.store.deepLinkData.onChange,\n    };\n\n    // Watch for isReady so that we can handle any pending events\n    // Delays events processing in the timeline until the store is ready to prevent missing data injected from the plugins\n    this.store.isReady.onChange((value) => this.onStorageReady(value));\n\n    // add segment destination plugin unless\n    // asked not to via configuration.\n    if (this.config.autoAddSegmentDestination) {\n      const segmentDestination = new SegmentDestination();\n      this.add({ plugin: segmentDestination });\n    }\n\n    // Setup platform specific plugins\n    this.platformPlugins.forEach((plugin) => this.add({ plugin: plugin }));\n  }\n\n  /**\n   * Initializes the client plugins, settings and subscribers.\n   * Can only be called once.\n   */\n  async init() {\n    if (this.isInitialized) {\n      this.logger.warn('SegmentClient already initialized');\n      return;\n    }\n\n    await this.fetchSettings();\n\n    // flush any stored events\n    this.flush(false);\n\n    // set up the timer/subscription for knowing when to flush events\n    this.setupInterval();\n    this.setupStorageSubscribers();\n\n    // set up tracking for lifecycle events\n    this.setupLifecycleEvents();\n\n    // check if the app was opened from a deep link\n    await this.trackDeepLinks();\n\n    // save the current installed version\n    await this.checkInstalledVersion();\n\n    this.isInitialized = true;\n  }\n\n  async fetchSettings() {\n    const settingsEndpoint = `${settingsCDN}/${this.config.writeKey}/settings`;\n\n    try {\n      const res = await fetch(settingsEndpoint);\n      const resJson = await res.json();\n      const integrations = resJson.integrations;\n      this.logger.info(`Received settings from Segment succesfully.`);\n      this.store.settings.set(integrations);\n    } catch {\n      this.logger.warn(\n        `Could not receive settings from Segment. ${\n          this.config.defaultSettings\n            ? 'Will use the default settings.'\n            : 'Device mode destinations will be ignored unless you specify default settings in the client config.'\n        }`\n      );\n      if (this.config.defaultSettings) {\n        this.store.settings.set(this.config.defaultSettings);\n      }\n    }\n  }\n\n  /**\n   * Clears all subscriptions to the store\n   */\n  private unsubscribeStorageWatchers() {\n    if (this.watchers.length > 0) {\n      for (const unsubscribe of this.watchers) {\n        try {\n          unsubscribe();\n        } catch (e) {\n          this.logger.error(e);\n        }\n      }\n    }\n  }\n\n  /**\n   * There is no garbage collection in JS, which means that any listeners, timeouts and subscriptions\n   * would run until the application closes\n   *\n   * This method exists in case the user for some reason needs to recreate the class instance during runtime.\n   * In this case, they should run client.cleanup() to destroy the listeners in the old client before creating a new one.\n   *\n   * There is a Stage 3 EMCAScript proposal to add a user-defined finalizer, which we could potentially switch to if\n   * it gets approved: https://github.com/tc39/proposal-weakrefs#finalizers\n   */\n  cleanup() {\n    if (this.flushInterval) {\n      clearInterval(this.flushInterval);\n    }\n\n    this.unsubscribeStorageWatchers();\n\n    this.appStateSubscription?.remove();\n\n    this.destroyed = true;\n    this.isInitialized = false;\n  }\n\n  private setupInterval() {\n    if (this.flushInterval !== null && this.flushInterval !== undefined) {\n      clearInterval(this.flushInterval);\n    }\n\n    this.flushInterval = setTimeout(() => {\n      this.flush();\n    }, this.config.flushInterval! * 1000);\n  }\n\n  private setupStorageSubscribers() {\n    this.unsubscribeStorageWatchers();\n  }\n\n  private setupLifecycleEvents() {\n    this.appStateSubscription?.remove();\n\n    this.appStateSubscription = AppState.addEventListener(\n      'change',\n      (nextAppState) => {\n        this.handleAppStateChange(nextAppState);\n      }\n    );\n  }\n\n  /**\n     Applies the supplied closure to the currently loaded set of plugins.\n     NOTE: This does not apply to plugins contained within DestinationPlugins.\n\n     - Parameter closure: A closure that takes an plugin to be operated on as a parameter.\n\n  */\n  apply(closure: (plugin: Plugin) => void) {\n    this.timeline.apply(closure);\n  }\n\n  /**\n   * Adds a new plugin to the currently loaded set.\n   * @param {{ plugin: Plugin, settings?: IntegrationSettings }} Plugin to be added. Settings are optional if you want to force a configuration instead of the Segment Cloud received one\n   */\n  add<P extends Plugin>({\n    plugin,\n    settings,\n  }: {\n    plugin: P;\n    settings?: P extends DestinationPlugin ? IntegrationSettings : never;\n  }) {\n    // plugins can either be added immediately or\n    // can be cached and added later during the next state update\n    // this is to avoid adding plugins before network requests made as part of setup have resolved\n    if (settings !== undefined && plugin.type === PluginType.destination) {\n      this.store.settings.add(\n        (plugin as unknown as DestinationPlugin).key,\n        settings\n      );\n    }\n\n    if (!this.store.isReady.get()) {\n      this.pluginsToAdd.push(plugin);\n    } else {\n      this.addPlugin(plugin);\n    }\n  }\n\n  private addPlugin(plugin: Plugin) {\n    plugin.configure(this);\n    this.timeline.add(plugin);\n  }\n\n  /**\n     Removes and unloads plugins with a matching name from the system.\n\n     - Parameter pluginName: An plugin name.\n  */\n  remove({ plugin }: { plugin: Plugin }) {\n    this.timeline.remove(plugin);\n  }\n\n  process(incomingEvent: SegmentEvent) {\n    const event = applyRawEventData(incomingEvent, this.store.userInfo.get());\n    if (this.store.isReady.get() === true) {\n      this.timeline.process(event);\n    } else {\n      this.pendingEvents.push(event);\n    }\n  }\n\n  private async trackDeepLinks() {\n    if (this.getConfig().trackDeepLinks === true) {\n      const deepLinkProperties = this.store.deepLinkData.get();\n      this.trackDeepLinkEvent(deepLinkProperties);\n\n      this.store.deepLinkData.onChange((data) => {\n        this.trackDeepLinkEvent(data);\n      });\n    }\n  }\n\n  private trackDeepLinkEvent(deepLinkProperties: DeepLinkData) {\n    if (deepLinkProperties.url !== '') {\n      const event = createTrackEvent({\n        event: 'Deep Link Opened',\n        properties: {\n          ...deepLinkProperties,\n        },\n      });\n\n      this.process(event);\n      this.logger.info('TRACK (Deep Link Opened) event saved', event);\n    }\n  }\n\n  /**\n   * Executes when the state store is initialized.\n   * @param isReady\n   */\n  private onStorageReady(isReady: boolean) {\n    if (isReady) {\n      // Add all plugins awaiting store\n      if (this.pluginsToAdd.length > 0 && !this.isAddingPlugins) {\n        this.isAddingPlugins = true;\n        try {\n          // start by adding the plugins\n          this.pluginsToAdd.forEach((plugin) => {\n            this.addPlugin(plugin);\n          });\n\n          // now that they're all added, clear the cache\n          // this prevents this block running for every update\n          this.pluginsToAdd = [];\n        } finally {\n          this.isAddingPlugins = false;\n        }\n      }\n\n      // Send all events in the queue\n      for (const e of this.pendingEvents) {\n        this.timeline.process(e);\n      }\n      this.pendingEvents = [];\n    }\n  }\n\n  async flush(debounceInterval: boolean = true): Promise<void> {\n    if (this.destroyed) {\n      return;\n    }\n\n    if (debounceInterval) {\n      // Reset interval\n      this.setupInterval();\n    }\n\n    const promises: (void | Promise<void>)[] = [];\n    getPluginsWithFlush(this.timeline).forEach((plugin) => {\n      promises.push(plugin.flush());\n    });\n\n    await Promise.allSettled(promises);\n\n    return Promise.resolve();\n  }\n\n  screen(name: string, options?: JsonMap) {\n    const event = createScreenEvent({\n      name,\n      properties: options,\n    });\n\n    this.process(event);\n    this.logger.info('SCREEN event saved', event);\n  }\n\n  track(eventName: string, options?: JsonMap) {\n    const event = createTrackEvent({\n      event: eventName,\n      properties: options,\n    });\n\n    this.process(event);\n    this.logger.info('TRACK event saved', event);\n  }\n\n  identify(userId?: string, userTraits?: UserTraits) {\n    const userInfo = this.store.userInfo.get();\n    const { traits: currentUserTraits } = userInfo;\n\n    const mergedTraits = {\n      ...currentUserTraits,\n      ...userTraits,\n    };\n\n    const event = createIdentifyEvent({\n      userId,\n      userTraits: mergedTraits,\n    });\n\n    this.store.userInfo.set({\n      ...userInfo,\n      userId: userId ?? userInfo.userId,\n      traits: mergedTraits,\n    });\n\n    this.process(event);\n    this.logger.info('IDENTIFY event saved', event);\n  }\n\n  group(groupId: string, groupTraits?: GroupTraits) {\n    const event = createGroupEvent({\n      groupId,\n      groupTraits,\n    });\n\n    this.process(event);\n    this.logger.info('GROUP event saved', event);\n  }\n\n  alias(newUserId: string) {\n    const { anonymousId, userId } = this.userInfo.get();\n    const event = createAliasEvent({\n      anonymousId,\n      userId,\n      newUserId,\n    });\n\n    this.store.userInfo.set({\n      ...this.store.userInfo.get(),\n      userId: newUserId,\n    });\n\n    this.process(event);\n    this.logger.info('ALIAS event saved', event);\n  }\n\n  /**\n   * Called once when the client is first created\n   *\n   * Detect and save the the currently installed application version\n   * Send application lifecycle events if trackAppLifecycleEvents is enabled\n   *\n   * Exactly one of these events will be sent, depending on the current and previous version:s\n   * Application Installed - no information on the previous version, so it's a fresh install\n   * Application Updated - the previous detected version is different from the current version\n   * Application Opened - the previously detected version is same as the current version\n   */\n  private async checkInstalledVersion() {\n    const context = await getContext(undefined, this.config);\n\n    const previousContext = this.store.context.get();\n\n    // Only overwrite the previous context values to preserve any values that are added by enrichment plugins like IDFA\n    await this.store.context.set(deepmerge(previousContext ?? {}, context));\n\n    // Only callback during the intial context load\n    if (this.onContextLoadedCallback !== undefined && !this.isContextLoaded) {\n      this.onContextLoadedCallback(UpdateType.initial);\n    }\n\n    this.isContextLoaded = true;\n    if (!this.config.trackAppLifecycleEvents) {\n      return;\n    }\n\n    if (previousContext?.app === undefined) {\n      const event = createTrackEvent({\n        event: 'Application Installed',\n        properties: {\n          version: context.app.version,\n          build: context.app.build,\n        },\n      });\n      this.process(event);\n      this.logger.info('TRACK (Application Installed) event saved', event);\n    } else if (context.app.version !== previousContext.app.version) {\n      const event = createTrackEvent({\n        event: 'Application Updated',\n        properties: {\n          version: context.app.version,\n          build: context.app.build,\n          previous_version: previousContext.app.version,\n          previous_build: previousContext.app.build,\n        },\n      });\n      this.process(event);\n      this.logger.info('TRACK (Application Updated) event saved', event);\n    }\n\n    const event = createTrackEvent({\n      event: 'Application Opened',\n      properties: {\n        from_background: false,\n        version: context.app.version,\n        build: context.app.build,\n      },\n    });\n    this.process(event);\n    this.logger.info('TRACK (Application Opened) event saved', event);\n  }\n\n  /**\n   * AppState event listener. Called whenever the app state changes.\n   *\n   * Send application lifecycle events if trackAppLifecycleEvents is enabled.\n   *\n   * Application Opened - only when the app state changes from 'inactive' or 'background' to 'active'\n   *   The initial event from 'unknown' to 'active' is handled on launch in checkInstalledVersion\n   * Application Backgrounded - when the app state changes from 'inactive' or 'background' to 'active\n   *\n   * @param nextAppState 'active', 'inactive', 'background' or 'unknown'\n   */\n  private handleAppStateChange(nextAppState: AppStateStatus) {\n    if (this.config.trackAppLifecycleEvents) {\n      if (\n        ['inactive', 'background'].includes(this.appState) &&\n        nextAppState === 'active'\n      ) {\n        const context = this.store.context.get();\n        const event = createTrackEvent({\n          event: 'Application Opened',\n          properties: {\n            from_background: true,\n            version: context?.app?.version,\n            build: context?.app?.build,\n          },\n        });\n        this.process(event);\n        this.logger.info('TRACK (Application Opened) event saved', event);\n      } else if (\n        this.appState === 'active' &&\n        ['inactive', 'background'].includes(nextAppState)\n      ) {\n        const event = createTrackEvent({\n          event: 'Application Backgrounded',\n        });\n        this.process(event);\n        this.logger.info('TRACK (Application Backgrounded) event saved', event);\n      }\n    }\n\n    this.appState = nextAppState;\n  }\n\n  reset(resetAnonymousId: boolean = true) {\n    const anonymousId =\n      resetAnonymousId === true\n        ? getUUID()\n        : this.store.userInfo.get().anonymousId;\n\n    this.store.userInfo.set({\n      anonymousId,\n      userId: undefined,\n      traits: undefined,\n    });\n\n    getPluginsWithReset(this.timeline).forEach((plugin) => plugin.reset());\n\n    this.logger.info('Client has been reset');\n  }\n\n  /**\n   * Registers a callback for when the client has loaded the device context. This happens at the startup of the app, but\n   * it is handy for plugins that require context data during configure as it guarantees the context data is available.\n   *\n   * If the context is already loaded it will call the callback immediately.\n   *\n   * @param callback Function to call when context is ready.\n   */\n  onContextLoaded(callback: OnContextLoadCallback) {\n    this.onContextLoadedCallback = callback;\n    if (this.isContextLoaded) {\n      this.onContextLoadedCallback(UpdateType.initial);\n    }\n  }\n}\n"]}